[{"path":"https://fbertran.github.io/Cascade/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Frederic Bertrand. Maintainer, author. Myriam Maumy-Bertrand. Author. Laurent Vallat. Contributor. Nicolas Jung. Contributor.","code":""},{"path":"https://fbertran.github.io/Cascade/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Frédéric Bertrand Myriam Maumy-Bertrand (2025). Cascade: R-package study, predict simulate diffusion signal temporal gene network, R package version 2.3. doi:10.32614/CRAN.package.Cascade. Jung, N., Bertrand, F., Bahram, S., Vallat, L., Maumy-Bertrand, M. (2014). Cascade: R-package study, predict simulate diffusion signal temporal gene network. Bioinformatics, 30(4):571-573, btt705, https://doi.org/10.1093/bioinformatics/btt705. Jung, N., Bertrand, F., Bahram, S., Vallat, L., Maumy-Bertrand, M. (2014). Cascade: R-package study, predict simulate diffusion signal temporal gene network, book abstracts, User2014!, Los Angeles, page 153, https://user2014.r-project.org/abstracts/posters/181_Jung.pdf.","code":"@Manual{,   title = {Cascade: a R-package to study, predict and simulate the diffusion of a signal through a temporal gene network},   author = {Frederic Bertrand and Myriam Maumy-Bertrand and Laurent Vallat and Nicolas Jung},   year = {2025},   note = {R package version 2.3},   url = {https://CRAN.R-project.org/package=Cascade},   doi = {10.32614/CRAN.package.Cascade}, } @Article{,   title = {Cascade: a R-package to study, predict and simulate the diffusion of a signal through a temporal gene network},   author = {Nicolas Jung and Frederic Bertrand and Seiamak Bahram and Laurent Vallat and Myriam Maumy-Bertrand},   year = {2014},   journal = {Bioinformatics},   volume = {30},   issue = {4},   url = {https://doi.org/10.1093/bioinformatics/btt705},   pages = {571-573}, } @Manual{,   title = {Cascade: a R-package to study, predict and simulate the diffusion of a signal through a temporal gene network},   author = {Nicolas Jung and Frederic Bertrand and Seiamak Bahram and Laurent Vallat and Myriam Maumy-Bertrand},   year = {2014},   note = {book of abstracts, User2014!, Los Angeles, page 153},   url = {https://user2014.r-project.org/abstracts/posters/181_Jung.pdf}, }"},{"path":[]},{"path":[]},{"path":"https://fbertran.github.io/Cascade/index.html","id":"frédéric-bertrand-and-myriam-maumy-bertrand","dir":"","previous_headings":"","what":"Frédéric Bertrand and Myriam Maumy-Bertrand","title":"Selection, Reverse-Engineering and Prediction in Cascade Networks","text":"https://doi.org/10.32614/CRAN.package.bigalgebra Cascade modeling tool allowing gene selection, reverse engineering, prediction cascade networks. Jung, N., Bertrand, F., Bahram, S., Vallat, L., Maumy-Bertrand, M. (2014) https://doi.org/10.1093/bioinformatics/btt705. package presented User2014! conference. Jung, N., Bertrand, F., Bahram, S., Vallat, L., Maumy-Bertrand, M. (2014). “Cascade: R-package study, predict simulate diffusion signal temporal genenetwork”, book abstracts, User2014!, Los Angeles, page 153, https://user2014.r-project.org/abstracts/posters/181_Jung.pdf. website examples created F. Bertrand M. Maumy-Bertrand.","code":""},{"path":"https://fbertran.github.io/Cascade/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Selection, Reverse-Engineering and Prediction in Cascade Networks","text":"can install released version Cascade CRAN : can install development version Cascade github :","code":"install.packages(\"Cascade\") devtools::install_github(\"fbertran/Cascade\")"},{"path":[]},{"path":"https://fbertran.github.io/Cascade/index.html","id":"data-management","dir":"","previous_headings":"Examples","what":"Data management","title":"Selection, Reverse-Engineering and Prediction in Cascade Networks","text":"Import Cascade Data (repeated measurements several subjects) CascadeData package turn micro array object. second line makes sure CascadeData package installed. Get summay plots data: plot chunk plotmicroarrayclass plot chunk plotmicroarrayclass","code":"library(Cascade) if(!require(CascadeData)){install.packages(\"CascadeData\")} data(micro_US) micro_US<-as.micro_array(micro_US,time=c(60,90,210,390),subject=6) summary(micro_US) #>    N1_US_T60        N1_US_T90        N1_US_T210       N1_US_T390       N2_US_T60      #>  Min.   :   1.0   Min.   :   1.0   Min.   :   1.0   Min.   :   1.0   Min.   :   1.0   #>  1st Qu.:  19.7   1st Qu.:  18.8   1st Qu.:  15.2   1st Qu.:  20.9   1st Qu.:  18.5   #>  Median :  38.0   Median :  37.2   Median :  34.9   Median :  40.2   Median :  36.9   #>  Mean   : 107.5   Mean   : 106.9   Mean   : 109.6   Mean   : 105.7   Mean   : 110.6   #>  3rd Qu.:  80.6   3rd Qu.:  82.1   3rd Qu.:  82.8   3rd Qu.:  84.8   3rd Qu.:  85.3   #>  Max.   :8587.9   Max.   :8311.7   Max.   :7930.3   Max.   :7841.8   Max.   :7750.3   #>    N2_US_T90        N2_US_T210       N2_US_T390       N3_US_T60        N3_US_T90      #>  Min.   :   1.0   Min.   :   1.0   Min.   :   1.0   Min.   :   1.0   Min.   :   1.0   #>  1st Qu.:  17.1   1st Qu.:  15.8   1st Qu.:  17.7   1st Qu.:  17.3   1st Qu.:  19.5   #>  Median :  36.7   Median :  36.0   Median :  37.4   Median :  34.4   Median :  38.2   #>  Mean   : 102.1   Mean   : 106.8   Mean   : 111.3   Mean   : 101.6   Mean   : 107.1   #>  3rd Qu.:  78.2   3rd Qu.:  83.5   3rd Qu.:  86.4   3rd Qu.:  75.4   3rd Qu.:  82.3   #>  Max.   :8014.3   Max.   :8028.6   Max.   :7498.4   Max.   :8072.2   Max.   :7889.2   #>    N3_US_T210       N3_US_T390       N4_US_T60        N4_US_T90        N4_US_T210     #>  Min.   :   1.0   Min.   :   1.0   Min.   :   1.0   Min.   :   1.0   Min.   :   1.0   #>  1st Qu.:  16.4   1st Qu.:  20.9   1st Qu.:  20.4   1st Qu.:  19.5   1st Qu.:  20.5   #>  Median :  34.7   Median :  41.0   Median :  38.9   Median :  38.5   Median :  39.9   #>  Mean   : 100.3   Mean   : 113.9   Mean   : 113.6   Mean   : 114.8   Mean   : 110.1   #>  3rd Qu.:  76.3   3rd Qu.:  89.2   3rd Qu.:  84.6   3rd Qu.:  86.1   3rd Qu.:  86.8   #>  Max.   :8278.2   Max.   :6856.2   Max.   :9502.3   Max.   :9193.4   Max.   :9436.0   #>    N4_US_T390       N5_US_T60        N5_US_T90        N5_US_T210       N5_US_T390     #>  Min.   :   1.0   Min.   :   1.0   Min.   :   1.0   Min.   :   1.0   Min.   :   1.0   #>  1st Qu.:  19.9   1st Qu.:  16.8   1st Qu.:  18.8   1st Qu.:  19.5   1st Qu.:  19.9   #>  Median :  38.8   Median :  34.5   Median :  36.9   Median :  38.2   Median :  39.0   #>  Mean   : 111.7   Mean   : 111.3   Mean   : 108.0   Mean   : 107.4   Mean   : 109.8   #>  3rd Qu.:  85.4   3rd Qu.:  82.0   3rd Qu.:  81.4   3rd Qu.:  82.4   3rd Qu.:  84.9   #>  Max.   :8771.0   Max.   :8569.3   Max.   :7970.1   Max.   :8371.0   Max.   :7686.5   #>    N6_US_T60        N6_US_T90        N6_US_T210       N6_US_T390     #>  Min.   :   1.0   Min.   :   1.0   Min.   :   1.0   Min.   :   1.0   #>  1st Qu.:  21.1   1st Qu.:  21.5   1st Qu.:  19.9   1st Qu.:  20.2   #>  Median :  40.9   Median :  40.8   Median :  39.1   Median :  39.4   #>  Mean   : 110.1   Mean   : 108.5   Mean   : 112.0   Mean   : 109.5   #>  3rd Qu.:  86.3   3rd Qu.:  85.6   3rd Qu.:  86.3   3rd Qu.:  86.6   #>  Max.   :8241.0   Max.   :8355.0   Max.   :8207.1   Max.   :9520.0"},{"path":"https://fbertran.github.io/Cascade/index.html","id":"gene-selection","dir":"","previous_headings":"Examples","what":"Gene selection","title":"Selection, Reverse-Engineering and Prediction in Cascade Networks","text":"several functions carry gene selection inference. detailed two vignettes package.","code":""},{"path":"https://fbertran.github.io/Cascade/index.html","id":"data-simulation","dir":"","previous_headings":"Examples","what":"Data simulation","title":"Selection, Reverse-Engineering and Prediction in Cascade Networks","text":"Let’s simulate cascade data reverse engineering. first design F matrix set seed make results reproducible draw scale free random network. simulate gene expression according network previously drawn Get summay plots simulated data: plot chunk summarysimuldata plot chunk summarysimuldata plot chunk summarysimuldata plot chunk plotsimuldata plot chunk plotsimuldata plot chunk plotsimuldata plot chunk plotsimuldata plot chunk plotsimuldata plot chunk plotsimuldata plot chunk plotsimuldata","code":"T<-4 F<-array(0,c(T-1,T-1,T*(T-1)/2))  for(i in 1:(T*(T-1)/2)){diag(F[,,i])<-1} F[,,2]<-F[,,2]*0.2 F[2,1,2]<-1 F[3,2,2]<-1 F[,,4]<-F[,,2]*0.3 F[3,1,4]<-1 F[,,5]<-F[,,2] set.seed(1) Net<-Cascade::network_random(   nb=100,   time_label=rep(1:4,each=25),   exp=1,   init=1,   regul=round(rexp(100,1))+1,   min_expr=0.1,   max_expr=2,   casc.level=0.4 ) Net@F<-F M <- Cascade::gene_expr_simulation(   network=Net,   time_label=rep(1:4,each=25),   subject=5,   level_peak=200) summary(M) #>  log(S/US) : P1T1   log(S/US) : P1T2    log(S/US) : P1T3    log(S/US) : P1T4   log(S/US) : P2T1   #>  Min.   :-887.428   Min.   :-2060.695   Min.   :-837.5811   Min.   :-2189.33   Min.   :-431.905   #>  1st Qu.: -53.644   1st Qu.:  -70.993   1st Qu.: -85.2176   1st Qu.: -115.23   1st Qu.: -50.282   #>  Median :   6.122   Median :    2.206   Median :  -6.6303   Median :  -10.49   Median :  -3.782   #>  Mean   :   3.928   Mean   :   -3.800   Mean   :   0.5563   Mean   :  -75.60   Mean   :   8.264   #>  3rd Qu.:  74.894   3rd Qu.:   79.999   3rd Qu.:  71.9501   3rd Qu.:   43.85   3rd Qu.:  40.975   #>  Max.   : 747.779   Max.   : 1461.163   Max.   :1279.6850   Max.   :  492.80   Max.   :1287.819   #>  log(S/US) : P2T2   log(S/US) : P2T3   log(S/US) : P2T4  log(S/US) : P3T1   log(S/US) : P3T2   #>  Min.   :-845.072   Min.   :-557.840   Min.   :-660.17   Min.   :-868.834   Min.   :-953.894   #>  1st Qu.: -21.668   1st Qu.: -42.958   1st Qu.: -63.34   1st Qu.: -44.656   1st Qu.: -59.964   #>  Median :   2.059   Median :  -2.448   Median : -10.97   Median :   1.839   Median :  -1.306   #>  Mean   :  18.235   Mean   :  25.290   Mean   :  18.10   Mean   :  -2.150   Mean   :  24.123   #>  3rd Qu.:  40.323   3rd Qu.:  46.573   3rd Qu.:  42.56   3rd Qu.:  55.072   3rd Qu.:  78.430   #>  Max.   : 699.912   Max.   :1754.081   Max.   :1418.99   Max.   : 597.562   Max.   :1808.233   #>  log(S/US) : P3T3    log(S/US) : P3T4   log(S/US) : P4T1   log(S/US) : P4T2   log(S/US) : P4T3   #>  Min.   :-1182.316   Min.   :-1027.24   Min.   :-1012.76   Min.   :-1569.32   Min.   :-577.799   #>  1st Qu.:  -87.170   1st Qu.:  -61.31   1st Qu.:  -33.79   1st Qu.: -118.83   1st Qu.: -62.623   #>  Median :   -2.614   Median :   16.27   Median :   11.57   Median :  -13.84   Median :  -8.788   #>  Mean   :   10.224   Mean   :   27.52   Mean   :   10.98   Mean   :  -63.39   Mean   : -14.803   #>  3rd Qu.:   79.246   3rd Qu.:   60.93   3rd Qu.:   74.09   3rd Qu.:   40.22   3rd Qu.:  37.779   #>  Max.   : 2761.291   Max.   : 1926.45   Max.   :  891.60   Max.   :  678.27   Max.   : 430.737   #>  log(S/US) : P4T4   log(S/US) : P5T1   log(S/US) : P5T2    log(S/US) : P5T3  log(S/US) : P5T4   #>  Min.   :-661.083   Min.   :-555.708   Min.   :-1467.268   Min.   :-911.18   Min.   :-621.705   #>  1st Qu.: -41.705   1st Qu.: -64.469   1st Qu.:  -68.769   1st Qu.: -71.66   1st Qu.: -62.466   #>  Median :  -1.468   Median :   2.697   Median :   -1.565   Median :   1.54   Median :  -5.789   #>  Mean   :  10.111   Mean   :   9.403   Mean   :    8.180   Mean   :  13.03   Mean   :   7.083   #>  3rd Qu.:  67.888   3rd Qu.:  57.251   3rd Qu.:   62.256   3rd Qu.:  86.29   3rd Qu.:  62.041   #>  Max.   : 492.723   Max.   : 654.771   Max.   :  990.550   Max.   :1386.11   Max.   : 689.323 plot(M)"},{"path":"https://fbertran.github.io/Cascade/index.html","id":"network-inference","dir":"","previous_headings":"Examples","what":"Network inference","title":"Selection, Reverse-Engineering and Prediction in Cascade Networks","text":"infer new network using subjectwise leave one cross-validation (measurement subject removed dataset) plot chunk netinf plot chunk netinf Heatmap coefficients Omega matrix network plot chunk heatresults ###Post inferrence network analysis switch data derived inferrence real biological network try detect optimal cutoff value: best cutoff value network fit scale free network.  Analyze network cutoff set previouly found 0.14 optimal value.","code":"Net_inf_C <- Cascade::inference(M, cv.subjects=TRUE) #> We are at step :  1 #> The convergence of the network is (L1 norm) : 0.0072 #> We are at step :  2 #> The convergence of the network is (L1 norm) : 0.00139 #> We are at step :  3 #> The convergence of the network is (L1 norm) : 0.00106 #> We are at step :  4 #> The convergence of the network is (L1 norm) : 0.00095 stats::heatmap(Net_inf_C@network, Rowv=NA, Colv=NA, scale=\"none\", revC=TRUE) data(\"network\") set.seed(1) cutoff(network) #> [1] \"This calculation may be long\" #> [1] \"1/10\" #> [1] \"2/10\" #> [1] \"3/10\" #> [1] \"4/10\" #> [1] \"5/10\" #> [1] \"6/10\" #> [1] \"7/10\" #> [1] \"8/10\" #> [1] \"9/10\" #> [1] \"10/10\" #>  [1] 0.000 0.001 0.126 0.112 0.091 0.584 0.885 0.677 0.604 0.363 #> $p.value #>  [1] 0.000 0.001 0.126 0.112 0.091 0.584 0.885 0.677 0.604 0.363 #> #> $p.value.inter #>  [1] 0.0003073808 0.0222769859 0.0521597921 0.0819131661 #>  [5] 0.1859011443 0.5539131661 0.8106723719 0.7795175496 #>  [9] 0.6267996116 0.3396322205 #> #> $sequence #>  [1] 0.00000000 0.04444444 0.08888889 0.13333333 0.17777778 #>  [6] 0.22222222 0.26666667 0.31111111 0.35555556 0.40000000 analyze_network(network,nv=0.14) #>    node betweenness degree    output  closeness #> 1     1           0      3 0.8133348 16.4471148 #> 2     2           0      3 0.8884602  7.9547696 #> 3     3           0      1 0.1749376 10.0055952 #> 4     4           0      3 0.5159878 11.4854812 #> 5     5           0      0 0.0000000  0.0000000 #> 6     6           0     13 3.5794097 25.6388630 #> 7     7           0      4 0.9685114  7.0356510 #> 8     8           0      0 0.0000000  0.0000000 #> 9     9           0      0 0.0000000  0.0000000 #> 10   10           3      2 0.6047036  3.0439695 #> 11   11          31     10 1.9146802  8.2263869 #> 12   12           1      1 0.2056836  0.8489352 #> 13   13          97     19 3.7578360 18.6066356 #> 14   14           0      0 0.0000000  0.0000000 #> 15   15           0      0 0.0000000  0.0000000 #> 16   16           0      0 0.0000000  0.0000000 #> 17   17           2      2 0.3985715  1.6450577 #> 18   18           9      1 0.1408025  0.5811461 #> 19   19           0      0 0.0000000  0.0000000 #> 20   20           0      0 0.0000000  0.0000000 #> 21   21           0      0 0.0000000  0.0000000 #> 22   22           0      0 0.0000000  0.0000000 #> 23   23           0      0 0.0000000  0.0000000 #> 24   24           0      0 0.0000000  0.0000000 #> 25   25           0      0 0.0000000  0.0000000 #> 26   26           0      0 0.0000000  0.0000000 #> 27   27           0      0 0.0000000  0.0000000 #> 28   28           9      2 0.3786198  1.5627095 #> 29   29           0      0 0.0000000  0.0000000 #> 30   30          28      6 1.1216028  4.6292854 #> 31   31           0      0 0.0000000  0.0000000 #> 32   32           0      0 0.0000000  0.0000000 #> 33   33           0      0 0.0000000  0.0000000 #> 34   34           3      1 0.1988608  0.8207750 #> 35   35           0      0 0.0000000  0.0000000 #> 36   36           0      0 0.0000000  0.0000000 #> 37   37           0      0 0.0000000  0.0000000 #> 38   38           0      0 0.0000000  0.0000000 #> 39   39           0      0 0.0000000  0.0000000 #> 40   40           0      0 0.0000000  0.0000000 #> 41   41           0      0 0.0000000  0.0000000 #> 42   42           0      0 0.0000000  0.0000000 #> 43   43           0      0 0.0000000  0.0000000 #> 44   44           0      0 0.0000000  0.0000000 #> 45   45           0      0 0.0000000  0.0000000 #> 46   46           0      0 0.0000000  0.0000000 #> 47   47           0      0 0.0000000  0.0000000 #> 48   48           0      0 0.0000000  0.0000000 #> 49   49           0      0 0.0000000  0.0000000 #> 50   50           0      0 0.0000000  0.0000000 #> 51   51           0      0 0.0000000  0.0000000 #> 52   52           0      0 0.0000000  0.0000000 #> 53   53           0      0 0.0000000  0.0000000 #> 54   54           0      0 0.0000000  0.0000000 #> 55   55           0     10 3.2277268 22.2234874 #> 56   56          13      3 0.7360000  3.5063367 #> 57   57           0      0 0.0000000  0.0000000 #> 58   58           1      1 0.2291004  0.9455855 #> 59   59           0      0 0.0000000  0.0000000 #> 60   60           0      2 0.3955933  7.4313822 #> 61   61           0      3 1.2813639  7.0435303 #> 62   62           0      0 0.0000000  0.0000000 #> 63   63           0      0 0.0000000  0.0000000 #> 64   64           2      2 0.3878745  1.6009071 #> 65   65           0      2 1.2169141 10.8093303 #> 66   66           5      1 0.3016614  1.2450723 #> 67   67           3      3 0.5958934  2.4594808 #> 68   68           0      0 0.0000000  0.0000000 #> 69   69           0      0 0.0000000  0.0000000 #> 70   70           0      0 0.0000000  0.0000000 #> 71   71          26      8 1.6479964  6.8019142 #> 72   72           0      0 0.0000000  0.0000000 #> 73   73           0      0 0.0000000  0.0000000 #> 74   74           0      0 0.0000000  0.0000000"},{"path":"https://fbertran.github.io/Cascade/reference/Cascade-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Cascade: Selection, Reverse-Engineering and Prediction in Cascade Networks — Cascade-package","title":"Cascade: Selection, Reverse-Engineering and Prediction in Cascade Networks — Cascade-package","text":"modeling tool allowing gene selection, reverse engineering, prediction cascade networks. Jung, N., Bertrand, F., Bahram, S., Vallat, L., Maumy-Bertrand, M. (2014) doi:10.1093/bioinformatics/btt705 .","code":""},{"path":"https://fbertran.github.io/Cascade/reference/Cascade-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cascade: Selection, Reverse-Engineering and Prediction in Cascade Networks — Cascade-package","text":"Jung, N., Bertrand, F., Bahram, S., Vallat, L., Maumy-Bertrand, M. (2014). Cascade: R-package study, predict simulate diffusion signal temporal gene network. Bioinformatics, btt705. Vallat, L., Kemper, C. ., Jung, N., Maumy-Bertrand, M., Bertrand, F., Meyer, N., ... & Bahram, S. (2013). Reverse-engineering genetic circuitry cancer cell predicted intervention chronic lymphocytic leukemia. Proceedings National Academy Sciences, 110(2), 459-464.","code":""},{"path":[]},{"path":"https://fbertran.github.io/Cascade/reference/Cascade-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cascade: Selection, Reverse-Engineering and Prediction in Cascade Networks — Cascade-package","text":"package written Frédéric Bertrand, Myriam Maumy-Bertrand Nicolas Jung biological insights Laurent Vallat. Maintainer: Frédéric Bertrand <frederic.bertrand@lecnam.net>","code":""},{"path":"https://fbertran.github.io/Cascade/reference/M.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated M data for examples. — M","title":"Simulated M data for examples. — M","text":"Simulated M microarray.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/M.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulated M data for examples. — M","text":"","code":"data(M) head(M) #> The matrix : #>  #>        log(S/US) : P1T1 log(S/US) : P1T2 log(S/US) : P1T3 #> gene 1         41.37771         42.22949       -31.925168 #> gene 2        478.62824        -23.91318         8.973348 #> gene 3       -655.65836        112.79919       182.380283 #> gene 4       -759.88206        -20.11196       -39.990416 #> gene 5       -159.70735        -20.89569      -105.649285 #> gene 6        295.70161        -11.37047       187.563254 #> ... #>  #> Vector of names : #> [1] \"gene 1\" \"gene 2\" \"gene 3\" \"gene 4\" \"gene 5\" \"gene 6\" #> ... #> Vector of group : #> [1] 1 1 1 1 1 1 #> ... #> Vector of starting time : #> [1] 0 #> ... #> Vector of time : #> [1] 1 2 3 4 #>  #> Number of subject : #> [1] 5"},{"path":"https://fbertran.github.io/Cascade/reference/Net.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated network data for examples. — Net","title":"Simulated network data for examples. — Net","text":"Simulated network.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/Net.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulated network data for examples. — Net","text":"","code":"data(Net) str(Net) #> Formal class 'network' [package \"Cascade\"] with 6 slots #>   ..@ network: num [1:100, 1:100] 0 0 0 0 0 0 0 0 0 0 ... #>   ..@ name   : chr [1:100] \"gene 1\" \"gene 2\" \"gene 3\" \"gene 4\" ... #>   ..@ F      : num [1:3, 1:3, 1:6] 1 0 0 0 1 0 0 0 1 0.2 ... #>   ..@ convF  : num [1, 1] 0 #>   ..@ convO  : num 0 #>   ..@ time_pt: int [1:4] 1 2 3 4"},{"path":"https://fbertran.github.io/Cascade/reference/Net_inf.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse-engineered network of the simulated data. — Net_inf","title":"Reverse-engineered network of the simulated data. — Net_inf","text":"reverse-engineered network simulated data (M Net).","code":""},{"path":"https://fbertran.github.io/Cascade/reference/Net_inf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse-engineered network of the simulated data. — Net_inf","text":"","code":"data(Net_inf) str(Net_inf) #> Formal class 'network' [package \"Cascade\"] with 6 slots #>   ..@ network: num [1:100, 1:100] 0 0 0 0 0 0 0 0 0 0 ... #>   ..@ name   : chr [1:100] \"gene 1\" \"gene 2\" \"gene 3\" \"gene 4\" ... #>   ..@ F      : num [1:3, 1:3, 1:6] 1.0574 0.048 0.0588 0 1.0574 ... #>   ..@ convF  : num [1:6, 1:4] 0.333 0.333 0.333 0.333 0.333 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:4] \"convF\" \"cc\" \"cc\" \"cc\" #>   ..@ convO  : num [1:4] 5.36e+04 6.80e-03 1.21e-03 9.61e-04 #>   ..@ time_pt: int [1:4] 1 2 3 4"},{"path":"https://fbertran.github.io/Cascade/reference/Selection.html","id":null,"dir":"Reference","previous_headings":"","what":"Selection of genes. — Selection","title":"Selection of genes. — Selection","text":"20 () genes differential expression t1, 20 () genes differential expression t2, 20 () genes differential expression t3, 20 () genes differential expression t4 et 20 () genes global differential expression selected.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/Selection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Selection of genes. — Selection","text":"","code":"data(Selection) head(Selection) #> The matrix : #>  #>                    US60        US90      US210 #> 236719_at    -2.0728409 -0.31237469  0.1792494 #> 1563563_at   -1.4451349  1.68695159 -0.4297297 #> 241059_at    -2.1747517  0.73649762  1.9195928 #> 1556161_a_at -1.6446593  0.18672685  0.1240958 #> 211786_at    -2.5257286  0.04791336  1.9459101 #> 229665_at    -0.5663955 -0.20130401  0.1775330 #> ... #>  #> Vector of names : #>      236719_at     1563563_at           <NA>   1556161_a_at      211786_at  #>      \"ID2-AS1\"       \"CCDC40\"      \"unknown\" \"LOC105379178\"      \"TNFRSF9\"  #>      229665_at  #>        \"CSTF3\"  #> ... #> Vector of group : #> [1] 1 1 1 1 1 1 #> ... #> Vector of starting time : #> [1] 1 1 1 1 1 1 #> ... #> Vector of time : #> [1]  60  90 210 390 #>  #> Number of subject : #> [1] 6 summary(Selection,3) #> Loading required package: cluster #>       US60                US90              US210             US390         #>  Min.   :-2.768413   Min.   :-2.36952   Min.   :-2.2557   Min.   :-2.6048   #>  1st Qu.:-0.231289   1st Qu.:-0.22754   1st Qu.:-0.0852   1st Qu.:-0.2729   #>  Median : 0.009688   Median :-0.02436   Median : 0.8850   Median : 0.3155   #>  Mean   :-0.104018   Mean   : 0.11805   Mean   : 0.7542   Mean   : 0.1994   #>  3rd Qu.: 0.155536   3rd Qu.: 0.14664   3rd Qu.: 1.5365   3rd Qu.: 0.7756   #>  Max.   : 2.835377   Max.   : 2.73655   Max.   : 3.0681   Max.   : 1.8034   #>       US60               US90                US210             US390          #>  Min.   :-2.79321   Min.   :-2.4924539   Min.   :-2.6174   Min.   :-1.85720   #>  1st Qu.:-0.60103   1st Qu.: 0.0000624   1st Qu.:-0.1060   1st Qu.:-0.45891   #>  Median :-0.35687   Median : 0.1092205   Median : 0.5719   Median : 0.04641   #>  Mean   :-0.33125   Mean   : 0.2327776   Mean   : 0.5657   Mean   : 0.08468   #>  3rd Qu.:-0.09721   3rd Qu.: 0.2370786   3rd Qu.: 1.1669   3rd Qu.: 0.64055   #>  Max.   : 2.29200   Max.   : 5.3185655   Max.   : 3.0445   Max.   : 2.83321   #>       US60                US90               US210              US390           #>  Min.   :-2.944439   Min.   :-0.972128   Min.   :-1.93487   Min.   :-3.841839   #>  1st Qu.:-0.208552   1st Qu.:-0.155597   1st Qu.:-0.02588   1st Qu.:-0.407941   #>  Median :-0.034103   Median : 0.002283   Median : 0.67576   Median : 0.037625   #>  Mean   :-0.005497   Mean   : 0.326509   Mean   : 0.79373   Mean   : 0.004927   #>  3rd Qu.: 0.076594   3rd Qu.: 0.335906   3rd Qu.: 1.82659   3rd Qu.: 0.658126   #>  Max.   : 3.317233   Max.   : 3.660047   Max.   : 3.56540   Max.   : 1.988571   #>       US60               US90              US210             US390          #>  Min.   :-2.85438   Min.   :-0.90355   Min.   :-0.5004   Min.   :-0.96834   #>  1st Qu.:-0.07044   1st Qu.:-0.10104   1st Qu.:-0.0744   1st Qu.:-0.07916   #>  Median : 0.01522   Median : 0.03256   Median : 0.4984   Median : 0.11127   #>  Mean   : 0.04910   Mean   : 0.24052   Mean   : 0.5159   Mean   : 0.20727   #>  3rd Qu.: 0.10404   3rd Qu.: 0.34912   3rd Qu.: 0.9811   3rd Qu.: 0.53894   #>  Max.   : 1.82903   Max.   : 2.25638   Max.   : 2.2774   Max.   : 1.90880   #>       US60               US90              US210             US390         #>  Min.   :-1.38002   Min.   :-2.94444   Min.   :-1.0172   Min.   :-1.3636   #>  1st Qu.:-0.20402   1st Qu.:-0.04535   1st Qu.:-0.0769   1st Qu.:-0.3322   #>  Median :-0.10868   Median : 0.09461   Median : 0.6268   Median : 0.1571   #>  Mean   : 0.01286   Mean   : 0.21109   Mean   : 0.6379   Mean   : 0.1038   #>  3rd Qu.: 0.03625   3rd Qu.: 0.29902   3rd Qu.: 1.2214   3rd Qu.: 0.5820   #>  Max.   : 2.31074   Max.   : 2.34603   Max.   : 2.5446   Max.   : 1.5979   #>       US60               US90              US210             US390         #>  Min.   :-1.79176   Min.   :-3.20791   Min.   :-1.1978   Min.   :-1.9588   #>  1st Qu.:-0.15003   1st Qu.:-0.09256   1st Qu.:-0.1294   1st Qu.:-0.1598   #>  Median :-0.00590   Median : 0.04481   Median : 0.7809   Median : 0.2099   #>  Mean   : 0.09885   Mean   : 0.24100   Mean   : 0.6294   Mean   : 0.1653   #>  3rd Qu.: 0.09654   3rd Qu.: 0.32625   3rd Qu.: 1.2284   3rd Qu.: 0.6642   #>  Max.   : 2.95475   Max.   : 2.58118   Max.   : 2.8027   Max.   : 2.1490"},{"path":"https://fbertran.github.io/Cascade/reference/analyze_network-network-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysing the network — analyze_network,network-method","title":"Analysing the network — analyze_network,network-method","text":"Calculates indicators node network.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/analyze_network-network-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysing the network — analyze_network,network-method","text":"","code":"# S4 method for class 'network' analyze_network(Omega, nv, label_v = NULL)"},{"path":"https://fbertran.github.io/Cascade/reference/analyze_network-network-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analysing the network — analyze_network,network-method","text":"Omega network object nv level cutoff analysis done label_v (optionnal) name genes","code":""},{"path":"https://fbertran.github.io/Cascade/reference/analyze_network-network-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analysing the network — analyze_network,network-method","text":"matrix containing, node, betweenness,degree, output, closeness.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/analyze_network-network-method.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Analysing the network — analyze_network,network-method","text":"Jung, N., Bertrand, F., Bahram, S., Vallat, L., Maumy-Bertrand, M. (2014). Cascade: R-package study, predict simulate diffusion signal temporal gene network. Bioinformatics, btt705. Vallat, L., Kemper, C. ., Jung, N., Maumy-Bertrand, M., Bertrand, F., Meyer, N., ... & Bahram, S. (2013). Reverse-engineering genetic circuitry cancer cell predicted intervention chronic lymphocytic leukemia. Proceedings National Academy Sciences, 110(2), 459-464.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/analyze_network-network-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Analysing the network — analyze_network,network-method","text":"Nicolas Jung, Frédéric Bertrand , Myriam Maumy-Bertrand.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/analyze_network-network-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analysing the network — analyze_network,network-method","text":"","code":"data(network)   analyze_network(network,nv=0) #> Loading required package: tnet #> Loading required package: igraph #>  #> Attaching package: ‘igraph’ #> The following object is masked from ‘package:Cascade’: #>  #>     compare #> The following objects are masked from ‘package:stats’: #>  #>     decompose, spectrum #> The following object is masked from ‘package:base’: #>  #>     union #> Loading required package: survival #> tnet: Analysis of Weighted, Two-mode, and Longitudinal networks. #> Type ?tnet for help. #>    node betweenness degree      output    closeness #> 1     1           0     52 2.493277168 110.83148964 #> 2     2           0     51 1.873353046  91.33091185 #> 3     3           0     48 0.869999868  75.92040114 #> 4     4           0     44 1.712495042  82.94726787 #> 5     5           0     44 0.811053103  34.64847877 #> 6     6           0     51 5.326562329 152.65540461 #> 7     7           0     50 3.448573704 104.41478218 #> 8     8           0     49 1.086343159  32.84110423 #> 9     9           0     52 0.781594709  35.17592984 #> 10   10          23     47 2.193224490  59.86437756 #> 11   11         156     48 3.844765796  92.87430047 #> 12   12          57     35 1.356068126  38.80420637 #> 13   13         171     44 5.060737204 125.32045602 #> 14   14           7     43 0.991895840  31.47338043 #> 15   15           0      5 0.125014915   2.54460894 #> 16   16           1      9 0.073129838   1.48851710 #> 17   17          51     13 0.862046510  17.54647642 #> 18   18          18      9 0.365414532   7.43780922 #> 19   19           0      4 0.058039485   1.18136139 #> 20   20           4      9 0.299858554   6.10345380 #> 21   21           4      8 0.220877759   4.49584372 #> 22   22          20     13 0.370169895   7.53460197 #> 23   23           3      4 0.121253333   2.46804404 #> 24   24           5      9 0.238911191   4.86290418 #> 25   25           0      0 0.000000000   0.00000000 #> 26   26           4     12 0.200293631   4.07686527 #> 27   27          15     15 0.676393027  13.76760322 #> 28   28          20      7 0.386360480   7.86415231 #> 29   29           5      2 0.099861827   2.03263185 #> 30   30         104     18 1.831171079  37.27246708 #> 31   31           2      5 0.089213272   1.81588645 #> 32   32          13     13 0.311496789   6.34034358 #> 33   33           0     18 0.152389258   3.10179844 #> 34   34          15     13 0.580194498  11.80953575 #> 35   35           0      0 0.000000000   0.00000000 #> 36   36           0      0 0.000000000   0.00000000 #> 37   37           0      0 0.000000000   0.00000000 #> 38   38           0      0 0.000000000   0.00000000 #> 39   39           0      0 0.000000000   0.00000000 #> 40   40           0      0 0.000000000   0.00000000 #> 41   41           0      0 0.000000000   0.00000000 #> 42   42           0      0 0.000000000   0.00000000 #> 43   43           0      0 0.000000000   0.00000000 #> 44   44           0      0 0.000000000   0.00000000 #> 45   45           0      0 0.000000000   0.00000000 #> 46   46           0      0 0.000000000   0.00000000 #> 47   47           0      0 0.000000000   0.00000000 #> 48   48           0      0 0.000000000   0.00000000 #> 49   49           0      0 0.000000000   0.00000000 #> 50   50           0      0 0.000000000   0.00000000 #> 51   51           0      0 0.000000000   0.00000000 #> 52   52           0      0 0.000000000   0.00000000 #> 53   53           0      0 0.000000000   0.00000000 #> 54   54           0      0 0.000000000   0.00000000 #> 55   55           0     40 3.884171706 143.68410789 #> 56   56          28     30 1.213962675  34.79491085 #> 57   57          17      8 0.381344058   7.76204583 #> 58   58           6     15 0.839509022  23.76967274 #> 59   59           2      7 0.191033515   3.88838076 #> 60   60           0     22 0.590567211  73.18774872 #> 61   61           0     25 1.624415450  82.84061811 #> 62   62           0      9 0.086465686   1.75996086 #> 63   63           0      1 0.001638944   0.03335979 #> 64   64           7     26 1.344245113  37.33582438 #> 65   65           0     13 1.368119564  95.96946550 #> 66   66          25      9 0.505402921  10.28719487 #> 67   67          24      9 0.756855631  15.40537469 #> 68   68           0     11 0.175883203  12.74214052 #> 69   69           1      2 0.074150206   1.50928614 #> 70   70          10     34 1.050511028  32.75663861 #> 71   71          70     35 3.333568905  86.26612955 #> 72   72           0      8 0.211764898   4.31035651 #> 73   73           7      6 0.288167148   5.86548174 #> 74   74          11     10 0.352721778   7.17945528"},{"path":"https://fbertran.github.io/Cascade/reference/as.micro_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a matrix into a micro_array object. — as.micro_array","title":"Coerce a matrix into a micro_array object. — as.micro_array","text":"Coerce matrix micro_array object.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/as.micro_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a matrix into a micro_array object. — as.micro_array","text":"","code":"as.micro_array(M, time, subject)"},{"path":"https://fbertran.github.io/Cascade/reference/as.micro_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a matrix into a micro_array object. — as.micro_array","text":"M matrix. Contains microarray measurements. size N * K, N number genes K=T*P T number time points, P number individuals. matrix created using cbind(M1,M2,...) M1 N*T matrix measurements individual 1, M2 N*T matrix measurements individual 2. time vector. time points measurements. subject number subjects.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/as.micro_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a matrix into a micro_array object. — as.micro_array","text":"micro_array object.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/as.micro_array.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Coerce a matrix into a micro_array object. — as.micro_array","text":"Jung, N., Bertrand, F., Bahram, S., Vallat, L., Maumy-Bertrand, M. (2014). Cascade: R-package study, predict simulate diffusion signal temporal gene network. Bioinformatics, btt705. Vallat, L., Kemper, C. ., Jung, N., Maumy-Bertrand, M., Bertrand, F., Meyer, N., ... & Bahram, S. (2013). Reverse-engineering genetic circuitry cancer cell predicted intervention chronic lymphocytic leukemia. Proceedings National Academy Sciences, 110(2), 459-464.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/as.micro_array.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce a matrix into a micro_array object. — as.micro_array","text":"Nicolas Jung, Frédéric Bertrand , Myriam Maumy-Bertrand.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/as.micro_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce a matrix into a micro_array object. — as.micro_array","text":"","code":"if(require(CascadeData)){   data(micro_US)   micro_US<-as.micro_array(micro_US,time=c(60,90,210,390),subject=6)   } #> Loading required package: CascadeData"},{"path":"https://fbertran.github.io/Cascade/reference/compare-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Some basic criteria of comparison between actual and inferred network. — compare-methods","title":"Some basic criteria of comparison between actual and inferred network. — compare-methods","text":"Allows comparison actual inferred network.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/compare-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Some basic criteria of comparison between actual and inferred network. — compare-methods","text":"","code":"# S4 method for class 'network,network,numeric' compare(Net, Net_inf, nv = 1)"},{"path":"https://fbertran.github.io/Cascade/reference/compare-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Some basic criteria of comparison between actual and inferred network. — compare-methods","text":"Net network object containing actual network. Net_inf network object containing inferred network. nv number indicates level cutoff comparison done.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/compare-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Some basic criteria of comparison between actual and inferred network. — compare-methods","text":"vector containing : sensibility, predictive positive value, F-score","code":""},{"path":"https://fbertran.github.io/Cascade/reference/compare-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Some basic criteria of comparison between actual and inferred network. — compare-methods","text":"list(\"signature(Net = \\\"network\\\", Net_inf = \\\"network\\\", nv = \\\"numeric\\\")\")","code":""},{"path":"https://fbertran.github.io/Cascade/reference/compare-methods.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Some basic criteria of comparison between actual and inferred network. — compare-methods","text":"Jung, N., Bertrand, F., Bahram, S., Vallat, L., Maumy-Bertrand, M. (2014). Cascade: R-package study, predict simulate diffusion signal temporal gene network. Bioinformatics, btt705. Vallat, L., Kemper, C. ., Jung, N., Maumy-Bertrand, M., Bertrand, F., Meyer, N., ... & Bahram, S. (2013). Reverse-engineering genetic circuitry cancer cell predicted intervention chronic lymphocytic leukemia. Proceedings National Academy Sciences, 110(2), 459-464.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/compare-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Some basic criteria of comparison between actual and inferred network. — compare-methods","text":"Nicolas Jung, Frédéric Bertrand , Myriam Maumy-Bertrand.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/compare-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Some basic criteria of comparison between actual and inferred network. — compare-methods","text":"","code":"data(Net) data(Net_inf)  #Comparing true and inferred networks F_score=NULL  #Here are the cutoff level tested test.seq<-seq(0,max(abs(Net_inf@network*0.9)),length.out=200) for(u in test.seq){   F_score<-rbind(F_score,Cascade::compare(Net,Net_inf,u)) } matplot(test.seq,F_score,type=\"l\",ylab=\"criterion value\",xlab=\"cutoff level\",lwd=2)"},{"path":"https://fbertran.github.io/Cascade/reference/cutoff-network-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose the best cutoff — cutoff,network-method","title":"Choose the best cutoff — cutoff,network-method","text":"Allows estimating best cutoff, function scale-freeness network.  sequence cutoff, corresponding p-value calculated.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/cutoff-network-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose the best cutoff — cutoff,network-method","text":"","code":"# S4 method for class 'network' cutoff(Omega, sequence = NULL, x_min = 0)"},{"path":"https://fbertran.github.io/Cascade/reference/cutoff-network-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose the best cutoff — cutoff,network-method","text":"Omega network object sequence (optional) vector corresponding sequence cutoffs tested. x_min (optional) integer ; values x_min retained performing test.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/cutoff-network-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose the best cutoff — cutoff,network-method","text":"list containing two objects : p.value p values corresponding sequence cutoff p.value.inter smoothed p value vector, using loess function","code":""},{"path":"https://fbertran.github.io/Cascade/reference/cutoff-network-method.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Choose the best cutoff — cutoff,network-method","text":"Jung, N., Bertrand, F., Bahram, S., Vallat, L., Maumy-Bertrand, M. (2014). Cascade: R-package study, predict simulate diffusion signal temporal gene network. Bioinformatics, btt705. Vallat, L., Kemper, C. ., Jung, N., Maumy-Bertrand, M., Bertrand, F., Meyer, N., ... & Bahram, S. (2013). Reverse-engineering genetic circuitry cancer cell predicted intervention chronic lymphocytic leukemia. Proceedings National Academy Sciences, 110(2), 459-464.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/cutoff-network-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Choose the best cutoff — cutoff,network-method","text":"Nicolas Jung, Frédéric Bertrand , Myriam Maumy-Bertrand.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/cutoff-network-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choose the best cutoff — cutoff,network-method","text":"","code":"# \\donttest{   data(network)   cutoff(network) #> [1] \"This calculation may be long\" #> [1] \"1/10\" #> [1] \"2/10\" #> [1] \"3/10\" #> [1] \"4/10\" #> [1] \"5/10\" #> [1] \"6/10\" #> [1] \"7/10\" #> [1] \"8/10\" #> [1] \"9/10\" #> [1] \"10/10\" #>  [1] 0.000 0.001 0.127 0.122 0.089 0.566 0.867 0.671 0.595 0.332  #> $p.value #>  [1] 0.000 0.001 0.127 0.122 0.089 0.566 0.867 0.671 0.595 0.332 #>  #> $p.value.inter #>  [1] -0.001490825  0.025014232  0.057341190  0.088355340  0.183669112 #>  [6]  0.537769423  0.794451285  0.768411316  0.611308228  0.312285009 #>  #> $sequence #>  [1] 0.00000000 0.04444444 0.08888889 0.13333333 0.17777778 0.22222222 #>  [7] 0.26666667 0.31111111 0.35555556 0.40000000 #>    #See vignette for more details # }"},{"path":"https://fbertran.github.io/Cascade/reference/dim.html","id":null,"dir":"Reference","previous_headings":"","what":"Dimension of the data — dim","title":"Dimension of the data — dim","text":"Dimension data","code":""},{"path":"https://fbertran.github.io/Cascade/reference/dim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dimension of the data — dim","text":"","code":"# S4 method for class 'micro_array' dim(x)"},{"path":"https://fbertran.github.io/Cascade/reference/dim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dimension of the data — dim","text":"x object class \"micro-array","code":""},{"path":"https://fbertran.github.io/Cascade/reference/dim.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Dimension of the data — dim","text":"list(\"signature(x = \\\"micro_array\\\")\") Gives dimension matrix measurements.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/dim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dimension of the data — dim","text":"","code":"if(require(CascadeData)){   data(micro_US)   micro_US<-as.micro_array(micro_US,time=c(60,90,210,390),subject=6)   dim(micro_US)   } #> [1] 54613    24"},{"path":"https://fbertran.github.io/Cascade/reference/evolution-network-method.html","id":null,"dir":"Reference","previous_headings":"","what":"See the evolution of the network with change of cutoff — evolution,network-method","title":"See the evolution of the network with change of cutoff — evolution,network-method","text":"See evolution network change cutoff.  function may usefull see global topology changed increasing cutoff.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/evolution-network-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"See the evolution of the network with change of cutoff — evolution,network-method","text":"","code":"# S4 method for class 'network' evolution(   net,   list_nv,   gr = NULL,   color.vertex = NULL,   fix = TRUE,   gif = TRUE,   taille = c(2000, 1000),   label_v = 1:dim(net@network)[1],   legend.position = \"topleft\",   frame.color = \"black\",   label.hub = FALSE )"},{"path":"https://fbertran.github.io/Cascade/reference/evolution-network-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"See the evolution of the network with change of cutoff — evolution,network-method","text":"net network object list_nv vector cutoff network shown gr vector giving group gene color.vertex vector giving color node fix logical, position node network calculated beginning ? Defaults TRUE. gif logical, TRUE taille vector giving size plot. Default c(2000,1000) label_v (optional) name genes legend.position (optional) position legend, defaults \"topleft\" frame.color (optional) color frame, defaults \"black\" label.hub (optional) boolean, defaults FALSE","code":""},{"path":"https://fbertran.github.io/Cascade/reference/evolution-network-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"See the evolution of the network with change of cutoff — evolution,network-method","text":"HTML page evolution network.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/evolution-network-method.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"See the evolution of the network with change of cutoff — evolution,network-method","text":"Jung, N., Bertrand, F., Bahram, S., Vallat, L., Maumy-Bertrand, M. (2014). Cascade: R-package study, predict simulate diffusion signal temporal gene network. Bioinformatics, btt705. Vallat, L., Kemper, C. ., Jung, N., Maumy-Bertrand, M., Bertrand, F., Meyer, N., ... & Bahram, S. (2013). Reverse-engineering genetic circuitry cancer cell predicted intervention chronic lymphocytic leukemia. Proceedings National Academy Sciences, 110(2), 459-464.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/evolution-network-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"See the evolution of the network with change of cutoff — evolution,network-method","text":"Nicolas Jung, Frédéric Bertrand , Myriam Maumy-Bertrand.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/evolution-network-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"See the evolution of the network with change of cutoff — evolution,network-method","text":"","code":"# \\donttest{   data(network)   sequence<-seq(0,0.2,length.out=20)   #setwd(\"inst/animation\")   #evolution(network,sequence) # }"},{"path":"https://fbertran.github.io/Cascade/reference/geneNeighborhood-network-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the neighborhood of a set of nodes. — geneNeighborhood,network-method","title":"Find the neighborhood of a set of nodes. — geneNeighborhood,network-method","text":"Find neighborhood set nodes.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/geneNeighborhood-network-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the neighborhood of a set of nodes. — geneNeighborhood,network-method","text":"","code":"# S4 method for class 'network' geneNeighborhood(   net,   targets,   nv = 0,   order = length(net@time_pt) - 1,   label_v = NULL,   ini = NULL,   frame.color = \"white\",   label.hub = FALSE,   graph = TRUE,   names = FALSE )"},{"path":"https://fbertran.github.io/Cascade/reference/geneNeighborhood-network-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the neighborhood of a set of nodes. — geneNeighborhood,network-method","text":"net network object targets vector containing set nodes nv level cutoff. Defaut 0. order neighborhood. Defaut `length(net@time_pt)-1`. label_v vector defining vertex labels. ini using “position” function, can fix position nodes. frame.color color frames. label.hub logical ; TRUE hubs labeled. graph plot graph network. Defaults `TRUE`. names return names neighbors. Defaults `FALSE`.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/geneNeighborhood-network-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the neighborhood of a set of nodes. — geneNeighborhood,network-method","text":"neighborhood targeted genes.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/geneNeighborhood-network-method.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find the neighborhood of a set of nodes. — geneNeighborhood,network-method","text":"Jung, N., Bertrand, F., Bahram, S., Vallat, L., Maumy-Bertrand, M. (2014). Cascade: R-package study, predict simulate diffusion signal temporal gene network. Bioinformatics, btt705. Vallat, L., Kemper, C. ., Jung, N., Maumy-Bertrand, M., Bertrand, F., Meyer, N., ... & Bahram, S. (2013). Reverse-engineering genetic circuitry cancer cell predicted intervention chronic lymphocytic leukemia. Proceedings National Academy Sciences, 110(2), 459-464.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/geneNeighborhood-network-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find the neighborhood of a set of nodes. — geneNeighborhood,network-method","text":"Nicolas Jung, Frédéric Bertrand , Myriam Maumy-Bertrand.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/geneNeighborhood-network-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the neighborhood of a set of nodes. — geneNeighborhood,network-method","text":"","code":"data(Selection) data(network) #A nv value can chosen using the cutoff function nv=.11  EGR1<-which(match(Selection@name,\"EGR1\")==1) P<-position(network,nv=nv)  geneNeighborhood(network,targets=EGR1,nv=nv,ini=P, label_v=network@name)  #> [[1]] #> [[1]][[1]] #> + 12/74 vertices, from 7a68dce: #>  [1] 55 11 32 56 57 59 63 66 67 69 70 71 #>  #> [[1]][[2]] #> + 1/74 vertex, from 7a68dce: #> [1] 68 #>  #>  #> [[2]] #> [[2]][[1]] #> + 38/74 vertices, from 7a68dce: #>  [1] 55 11 32 56 57 59 63 66 67 69 70 71 15 16 18 20 21 22 23 24 27 30 31 42 50 #> [26] 72 40 62 48 35 38 39 19 26 37 43 45 73 #>  #> [[2]][[2]] #> + 1/74 vertex, from 7a68dce: #> [1] 68 #>  #>  #> [[3]] #> [[3]][[1]] #> + 45/74 vertices, from 7a68dce: #>  [1] 55 11 32 56 57 59 63 66 67 69 70 71 15 16 18 20 21 22 23 24 27 30 31 42 50 #> [26] 72 40 62 48 35 38 39 19 26 37 43 45 73 36 54 41 46 49 51 52 #>  #> [[3]][[2]] #> + 1/74 vertex, from 7a68dce: #> [1] 68 #>  #>"},{"path":"https://fbertran.github.io/Cascade/reference/geneSelection.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for selecting genes — geneSelection","title":"Methods for selecting genes — geneSelection","text":"Selection differentially expressed genes.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/geneSelection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for selecting genes — geneSelection","text":"","code":"# S4 method for class 'micro_array,micro_array,numeric' geneSelection(   x,   y,   tot.number,   data_log = TRUE,   wanted.patterns = NULL,   forbidden.patterns = NULL,   peak = NULL,   alpha = 0.05,   Design = NULL,   lfc = 0 )  # S4 method for class 'list,list,numeric' geneSelection(   x,   y,   tot.number,   data_log = TRUE,   alpha = 0.05,   cont = FALSE,   lfc = 0,   f.asso = NULL )  # S4 method for class 'micro_array,numeric' genePeakSelection(   x,   peak,   y = NULL,   data_log = TRUE,   durPeak = c(1, 1),   abs_val = TRUE,   alpha_diff = 0.05 )"},{"path":"https://fbertran.github.io/Cascade/reference/geneSelection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for selecting genes — geneSelection","text":"x either micro_array object list micro_array objects. first case, micro_array object represents stimulated measurements. second case, control unstimulated data (present) first element list. y either micro_array object list strings. first case, micro_array object represents stimulated measurements. second case, list way specify contrast: First element: condition, condition&time pattern. condition specification used overall compare two conditions.  condition&time specification used comparing two conditions two precise time points. pattern specification allows decide time point differentially expressed. Second element: vector length 2. two conditions compared. condition used control, first element vector. However, control measured throught time, option cont=TRUE used. Third element: depends first element.  needed condition specified.  condition&time specified, vector containing time point comparison done. pattern specified, vector 0 1 length T, T number time points. time points desired differential expression provided 1. tot.number integer. number selected genes. tot.number <0 differentially genes selected. tot.number > 1, tot.number maximum diffenrtially genes selected.  0<tot.number<1, tot.number represents proportion diffenrentially genes selected. data_log logical (default TRUE); data logged ? wanted.patterns matrix wanted patterns [geneSelection]. forbidden.patterns matrix forbidden patterns [geneSelection]. peak interger. time points measurements genes selected [optionnal geneSelection]. alpha float; risk level. Default `alpha=0.05` Design design matrix experiment. Defaults `NULL`. lfc log fold change value used limma's `topTable`. Defaults 0. cont use contrasts. Defaults `FALSE`. f.asso function used assess association genes. default value `NULL` implies use usual `mean` function. durPeak vector size 2 (default c(1,1)) ; first elements gives length peak left, second right. [genePeakSelection] abs_val logical (default TRUE) ; genes selected basis absolute value expression ? [genePeakSelection] alpha_diff float; risk level","code":""},{"path":"https://fbertran.github.io/Cascade/reference/geneSelection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for selecting genes — geneSelection","text":"micro_array object.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/geneSelection.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Methods for selecting genes — geneSelection","text":"Jung, N., Bertrand, F., Bahram, S., Vallat, L., Maumy-Bertrand, M. (2014). Cascade: R-package study, predict simulate diffusion signal temporal gene network. Bioinformatics, btt705. Vallat, L., Kemper, C. ., Jung, N., Maumy-Bertrand, M., Bertrand, F., Meyer, N., ... & Bahram, S. (2013). Reverse-engineering genetic circuitry cancer cell predicted intervention chronic lymphocytic leukemia. Proceedings National Academy Sciences, 110(2), 459-464.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/geneSelection.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Methods for selecting genes — geneSelection","text":"Nicolas Jung, Frédéric Bertrand , Myriam Maumy-Bertrand.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/geneSelection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for selecting genes — geneSelection","text":"","code":"# \\donttest{  if(require(CascadeData)){   data(micro_US)   micro_US<-as.micro_array(micro_US,time=c(60,90,210,390),subject=6)   data(micro_S)   micro_S<-as.micro_array(micro_S,time=c(60,90,210,390),subject=6)    #Basically, to find the 50 more significant expressed genes you will use:   Selection_1<-geneSelection(x=micro_S,y=micro_US,   tot.number=50,data_log=TRUE)   summary(Selection_1)      #If we want to select genes that are differentially    #at time t60 or t90 :   Selection_2<-geneSelection(x=micro_S,y=micro_US,tot.number=30,   wanted.patterns=   rbind(c(0,1,0,0),c(1,0,0,0),c(1,1,0,0)))   summary(Selection_2)    #To select genes that have a differential maximum of expression at a specific time point.      Selection_3<-genePeakSelection(x=micro_S,y=micro_US,peak=1,   abs_val=FALSE,alpha_diff=0.01)   summary(Selection_3)   } #> Loading required package: limma #> Warning: package ‘limma’ was built under R version 4.5.1 #>       US60               US90             US210            US390         #>  Min.   :-0.44125   Min.   :-0.8100   Min.   :-1.560   Min.   :-1.0414   #>  1st Qu.:-0.08878   1st Qu.:-0.1214   1st Qu.: 1.178   1st Qu.: 0.7883   #>  Median : 0.06389   Median : 0.0170   Median : 1.537   Median : 1.2396   #>  Mean   : 0.29793   Mean   : 0.3231   Mean   : 1.509   Mean   : 1.1426   #>  3rd Qu.: 0.18056   3rd Qu.: 0.1667   3rd Qu.: 1.919   3rd Qu.: 1.5070   #>  Max.   : 2.86440   Max.   : 4.2847   Max.   : 3.673   Max.   : 4.6843   #>       US60              US90              US210             US390         #>  Min.   :-0.9303   Min.   :-0.12274   Min.   :-1.2161   Min.   :-0.9591   #>  1st Qu.:-0.4365   1st Qu.: 0.05945   1st Qu.: 0.8696   1st Qu.: 0.4383   #>  Median :-0.2202   Median : 0.15432   Median : 1.1855   Median : 0.7457   #>  Mean   :-0.1439   Mean   : 0.43625   Mean   : 1.2308   Mean   : 0.7790   #>  3rd Qu.:-0.0282   3rd Qu.: 0.29036   3rd Qu.: 1.6403   3rd Qu.: 1.0575   #>  Max.   : 2.0267   Max.   : 3.37588   Max.   : 2.6157   Max.   : 4.6113   #>       US60               US90              US210            US390        #>  Min.   :-0.62452   Min.   :-0.53921   Min.   :-1.653   Min.   :-1.611   #>  1st Qu.:-0.03412   1st Qu.:-0.03297   1st Qu.: 1.402   1st Qu.: 0.812   #>  Median : 0.06132   Median : 0.09073   Median : 1.779   Median : 1.091   #>  Mean   : 0.34579   Mean   : 0.68574   Mean   : 1.836   Mean   : 1.075   #>  3rd Qu.: 0.13643   3rd Qu.: 0.77977   3rd Qu.: 2.231   3rd Qu.: 1.412   #>  Max.   : 3.31723   Max.   : 4.36037   Max.   : 4.271   Max.   : 4.506   #>       US60               US90              US210             US390         #>  Min.   :-0.33647   Min.   :-0.46488   Min.   :-0.8332   Min.   :-0.5609   #>  1st Qu.:-0.02169   1st Qu.:-0.06483   1st Qu.: 0.7915   1st Qu.: 0.4747   #>  Median : 0.04853   Median : 0.04034   Median : 1.0525   Median : 0.6206   #>  Mean   : 0.22706   Mean   : 0.44077   Mean   : 1.1166   Mean   : 0.7000   #>  3rd Qu.: 0.18651   3rd Qu.: 0.59738   3rd Qu.: 1.4347   3rd Qu.: 0.8204   #>  Max.   : 1.82903   Max.   : 3.60640   Max.   : 2.9587   Max.   : 3.2116   #>       US60               US90              US210             US390         #>  Min.   :-0.46722   Min.   :-0.46073   Min.   :-1.0271   Min.   :-1.0395   #>  1st Qu.:-0.17848   1st Qu.:-0.02118   1st Qu.: 0.8441   1st Qu.: 0.4687   #>  Median :-0.09357   Median : 0.13574   Median : 1.2569   Median : 0.7384   #>  Mean   : 0.13903   Mean   : 0.47404   Mean   : 1.2451   Mean   : 0.7381   #>  3rd Qu.: 0.04130   3rd Qu.: 0.60663   3rd Qu.: 1.7215   3rd Qu.: 0.9835   #>  Max.   : 2.31074   Max.   : 3.24454   Max.   : 2.5446   Max.   : 3.4299   #>       US60               US90               US210            US390         #>  Min.   :-0.19230   Min.   :-0.688731   Min.   :-1.472   Min.   :-1.2069   #>  1st Qu.:-0.02128   1st Qu.: 0.009111   1st Qu.: 1.100   1st Qu.: 0.5209   #>  Median : 0.02499   Median : 0.176150   Median : 1.419   Median : 0.8359   #>  Mean   : 0.37176   Mean   : 0.566765   Mean   : 1.391   Mean   : 0.8804   #>  3rd Qu.: 0.12327   3rd Qu.: 0.828888   3rd Qu.: 1.858   3rd Qu.: 1.2084   #>  Max.   : 3.16035   Max.   : 3.199747   Max.   : 2.803   Max.   : 4.1558      #>       US60              US90             US210             US390          #>  Min.   :-2.5257   Min.   :-2.3695   Min.   :-2.2557   Min.   :-1.63142   #>  1st Qu.:-1.6127   1st Qu.:-0.2866   1st Qu.:-0.2105   1st Qu.:-0.20828   #>  Median :-0.3778   Median : 0.6600   Median : 0.1241   Median :-0.09562   #>  Mean   :-0.5575   Mean   : 0.3237   Mean   : 0.2928   Mean   :-0.02706   #>  3rd Qu.: 0.2975   3rd Qu.: 0.8961   3rd Qu.: 0.6911   3rd Qu.: 0.23099   #>  Max.   : 2.3763   Max.   : 2.4655   Max.   : 2.1848   Max.   : 0.78412   #>       US60              US90               US210              US390          #>  Min.   :-2.7932   Min.   :-2.492454   Min.   :-2.61740   Min.   :-1.67813   #>  1st Qu.:-0.9423   1st Qu.:-0.201708   1st Qu.:-0.26291   1st Qu.:-0.43358   #>  Median :-0.3059   Median :-0.009419   Median : 0.06493   Median : 0.00995   #>  Mean   :-0.3262   Mean   : 0.265084   Mean   :-0.02941   Mean   :-0.03069   #>  3rd Qu.: 0.1071   3rd Qu.: 0.620449   3rd Qu.: 0.28656   3rd Qu.: 0.21746   #>  Max.   : 2.2920   Max.   : 5.318566   Max.   : 1.28785   Max.   : 2.83321   #>       US60              US90             US210             US390           #>  Min.   :-2.9444   Min.   :-0.9721   Min.   :-1.5506   Min.   :-1.682560   #>  1st Qu.:-1.1363   1st Qu.:-0.3163   1st Qu.:-0.8141   1st Qu.:-0.405205   #>  Median :-0.5098   Median : 0.0250   Median :-0.1471   Median :-0.222479   #>  Mean   :-0.3967   Mean   : 0.2474   Mean   :-0.1510   Mean   :-0.246058   #>  3rd Qu.: 0.4925   3rd Qu.: 0.6905   3rd Qu.: 0.3529   3rd Qu.:-0.009658   #>  Max.   : 2.1761   Max.   : 2.5878   Max.   : 1.8377   Max.   : 0.563272   #>       US60               US90             US210              US390          #>  Min.   :-2.85438   Min.   :-0.9036   Min.   :-0.50038   Min.   :-0.89875   #>  1st Qu.:-0.43892   1st Qu.:-0.4123   1st Qu.:-0.10579   1st Qu.:-0.09241   #>  Median :-0.15123   Median : 0.1225   Median :-0.01508   Median : 0.04142   #>  Mean   :-0.18276   Mean   : 0.1603   Mean   : 0.06557   Mean   : 0.11943   #>  3rd Qu.: 0.06281   3rd Qu.: 0.6199   3rd Qu.: 0.18144   3rd Qu.: 0.18669   #>  Max.   : 1.00712   Max.   : 2.2225   Max.   : 1.12214   Max.   : 1.67398   #>       US60              US90              US210              US390          #>  Min.   :-1.3800   Min.   :-2.94444   Min.   :-1.01720   Min.   :-1.32176   #>  1st Qu.:-0.3687   1st Qu.:-0.18634   1st Qu.:-0.11358   1st Qu.:-0.35558   #>  Median :-0.1100   Median : 0.05601   Median : 0.04743   Median :-0.09259   #>  Mean   : 0.1080   Mean   : 0.02899   Mean   : 0.07287   Mean   :-0.01982   #>  3rd Qu.: 0.6869   3rd Qu.: 0.48146   3rd Qu.: 0.27237   3rd Qu.: 0.29955   #>  Max.   : 1.7346   Max.   : 1.09182   Max.   : 0.97792   Max.   : 0.84730   #>       US60              US90              US210             US390          #>  Min.   :-1.7918   Min.   :-3.20791   Min.   :-0.5665   Min.   :-0.40829   #>  1st Qu.:-0.5119   1st Qu.:-0.41715   1st Qu.:-0.0899   1st Qu.:-0.04835   #>  Median :-0.1389   Median : 0.18232   Median : 0.1129   Median : 0.18232   #>  Mean   :-0.0530   Mean   : 0.07067   Mean   : 0.2025   Mean   : 0.22579   #>  3rd Qu.: 0.5018   3rd Qu.: 0.66872   3rd Qu.: 0.6079   3rd Qu.: 0.35914   #>  Max.   : 1.9545   Max.   : 2.11718   Max.   : 0.9111   Max.   : 1.12481      #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #>       US60               US90              US210            US390         #>  Min.   :-2.08980   Min.   :-0.31237   Min.   :0.1792   Min.   :-0.1907   #>  1st Qu.:-1.97764   1st Qu.:-0.19129   1st Qu.:0.5294   1st Qu.: 0.2341   #>  Median :-0.47593   Median : 0.04929   Median :0.7023   Median : 0.3501   #>  Mean   :-0.81483   Mean   : 0.25813   Mean   :0.9934   Mean   : 0.6023   #>  3rd Qu.:-0.09126   3rd Qu.: 0.54588   3rd Qu.:1.6357   3rd Qu.: 0.9610   #>  Max.   : 0.68123   Max.   : 1.53985   Max.   :2.1467   Max.   : 1.5644   #>       US60              US90              US210             US390         #>  Min.   :-2.6684   Min.   :-0.26913   Min.   :0.06714   Min.   :-0.8210   #>  1st Qu.:-0.8209   1st Qu.:-0.01513   1st Qu.:0.33706   1st Qu.: 0.1477   #>  Median :-0.6285   Median : 0.43284   Median :0.57086   Median : 0.3322   #>  Mean   :-0.8521   Mean   : 0.59842   Mean   :1.02346   Mean   : 0.2843   #>  3rd Qu.:-0.5024   3rd Qu.: 0.81355   3rd Qu.:1.95153   3rd Qu.: 0.5248   #>  Max.   :-0.2160   Max.   : 2.52972   Max.   :2.46712   Max.   : 1.0576   #>       US60              US90              US210            US390          #>  Min.   :-1.7362   Min.   :-0.37531   Min.   :0.4137   Min.   :-0.39973   #>  1st Qu.:-1.2935   1st Qu.:-0.05243   1st Qu.:0.6403   1st Qu.: 0.01476   #>  Median :-0.6122   Median : 0.15453   Median :0.9058   Median : 0.39314   #>  Mean   :-0.6003   Mean   : 0.42682   Mean   :1.4471   Mean   : 0.60801   #>  3rd Qu.:-0.1362   3rd Qu.: 0.39540   3rd Qu.:1.7758   3rd Qu.: 1.02303   #>  Max.   : 1.0030   Max.   : 2.61726   Max.   :4.0489   Max.   : 1.98138   #>       US60              US90              US210               US390         #>  Min.   :-0.8031   Min.   :-0.37068   Min.   :-0.004577   Min.   :-0.3330   #>  1st Qu.:-0.3147   1st Qu.:-0.03856   1st Qu.: 0.380320   1st Qu.: 0.1424   #>  Median :-0.2022   Median : 0.16561   Median : 0.695225   Median : 0.1763   #>  Mean   :-0.1834   Mean   : 0.31788   Mean   : 0.845885   Mean   : 0.2404   #>  3rd Qu.:-0.1566   3rd Qu.: 0.39576   3rd Qu.: 1.079119   3rd Qu.: 0.2242   #>  Max.   : 0.7312   Max.   : 1.85850   Max.   : 2.131919   Max.   : 1.1892   #>       US60               US90             US210             US390          #>  Min.   :-1.44692   Min.   :-0.2031   Min.   :-0.2513   Min.   :-0.22907   #>  1st Qu.:-0.58974   1st Qu.: 0.1317   1st Qu.: 0.3010   1st Qu.: 0.01654   #>  Median :-0.30087   Median : 0.1696   Median : 0.4453   Median : 0.23275   #>  Mean   :-0.37780   Mean   : 0.3969   Mean   : 0.7177   Mean   : 0.31001   #>  3rd Qu.:-0.09775   3rd Qu.: 0.5669   3rd Qu.: 1.0310   3rd Qu.: 0.61957   #>  Max.   : 0.35066   Max.   : 1.4722   Max.   : 2.4299   Max.   : 1.02008   #>       US60               US90              US210            US390          #>  Min.   :-1.09861   Min.   :-0.11204   Min.   :0.3050   Min.   :-0.09353   #>  1st Qu.:-0.54020   1st Qu.: 0.04746   1st Qu.:0.5177   1st Qu.: 0.22531   #>  Median :-0.11493   Median : 0.11738   Median :0.6666   Median : 0.51500   #>  Mean   :-0.22662   Mean   : 0.33689   Mean   :1.0728   Mean   : 0.74727   #>  3rd Qu.: 0.03167   3rd Qu.: 0.21122   3rd Qu.:1.5670   3rd Qu.: 0.91661   #>  Max.   : 0.75524   Max.   : 2.05415   Max.   :2.5510   Max.   : 2.28725        if(require(CascadeData)){ data(micro_US) micro_US<-as.micro_array(micro_US,time=c(60,90,210,390),subject=6) data(micro_S) micro_S<-as.micro_array(micro_S,time=c(60,90,210,390),subject=6) #Genes with differential expression at t1 Selection1<-geneSelection(x=micro_S,y=micro_US,20,wanted.patterns= rbind(c(1,0,0,0))) #Genes with differential expression at t2 Selection2<-geneSelection(x=micro_S,y=micro_US,20,wanted.patterns= rbind(c(0,1,0,0))) #Genes with differential expression at t3 Selection3<-geneSelection(x=micro_S,y=micro_US,20,wanted.patterns= rbind(c(0,0,1,0))) #Genes with differential expression at t4 Selection4<-geneSelection(x=micro_S,y=micro_US,20,wanted.patterns= rbind(c(0,0,0,1))) #Genes with global differential expression  Selection5<-geneSelection(x=micro_S,y=micro_US,20)  #We then merge these selections: Selection<-unionMicro(list(Selection1,Selection2,Selection3,Selection4,Selection5)) print(Selection)  #Prints the correlation graphics Figure 4: summary(Selection,3)  ##Uncomment this code to retrieve geneids. #library(org.Hs.eg.db) # #ff<-function(x){substr(x, 1, nchar(x)-3)} #ff<-Vectorize(ff) # ##Here is the function to transform the probeset names to gene ID. # #library(\"hgu133plus2.db\") # #probe_to_id<-function(n){   #x <- hgu133plus2SYMBOL #mp<-mappedkeys(x) #xx <- unlist(as.list(x[mp])) #genes_all = xx[(n)] #genes_all[is.na(genes_all)]<-\"unknown\" #return(genes_all) #} #Selection@name<-probe_to_id(Selection@name) } #> Error in dimnames(x) <- dn: 'dimnames' applied to non-array # }"},{"path":"https://fbertran.github.io/Cascade/reference/gene_expr_simulation-network-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulates microarray data based on a given network. — gene_expr_simulation,network-method","title":"Simulates microarray data based on a given network. — gene_expr_simulation,network-method","text":"Simulates microarray data based given network.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/gene_expr_simulation-network-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulates microarray data based on a given network. — gene_expr_simulation,network-method","text":"","code":"# S4 method for class 'network' gene_expr_simulation(network, time_label = 1:4, subject = 5, level_peak = 100)"},{"path":"https://fbertran.github.io/Cascade/reference/gene_expr_simulation-network-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulates microarray data based on a given network. — gene_expr_simulation,network-method","text":"network network object. time_label vector containing time labels. subject number subjects level_peak mean level peaks.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/gene_expr_simulation-network-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulates microarray data based on a given network. — gene_expr_simulation,network-method","text":"micro_array object.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/gene_expr_simulation-network-method.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulates microarray data based on a given network. — gene_expr_simulation,network-method","text":"Jung, N., Bertrand, F., Bahram, S., Vallat, L., Maumy-Bertrand, M. (2014). Cascade: R-package study, predict simulate diffusion signal temporal gene network. Bioinformatics, btt705. Vallat, L., Kemper, C. ., Jung, N., Maumy-Bertrand, M., Bertrand, F., Meyer, N., ... & Bahram, S. (2013). Reverse-engineering genetic circuitry cancer cell predicted intervention chronic lymphocytic leukemia. Proceedings National Academy Sciences, 110(2), 459-464.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/gene_expr_simulation-network-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulates microarray data based on a given network. — gene_expr_simulation,network-method","text":"Nicolas Jung, Frédéric Bertrand , Myriam Maumy-Bertrand.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/gene_expr_simulation-network-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulates microarray data based on a given network. — gene_expr_simulation,network-method","text":"","code":"data(Net) set.seed(1)  #We simulate gene expression according to the network Net Msim<-gene_expr_simulation(   network=Net,   time_label=rep(1:4,each=25),   subject=5,   level_peak=200) #> Loading required package: VGAM #> Loading required package: stats4 #> Loading required package: splines #> Loading required package: magic #> Loading required package: abind head(Msim) #> The matrix : #>  #>        log(S/US) : P1T1 log(S/US) : P1T2 log(S/US) : P1T3 #> gene 1         86.06709        44.533656       -57.361320 #> gene 2       -146.83138       120.514233       -39.892240 #> gene 3        228.34653        -3.625970       -60.889866 #> gene 4        505.11452        13.929252        -2.786049 #> gene 5        -36.57508        -1.828829        46.784308 #> gene 6       -486.82335       -91.502323      -173.402124 #> ... #>  #> Vector of names : #> [1] \"gene 1\" \"gene 2\" \"gene 3\" \"gene 4\" \"gene 5\" \"gene 6\" #> ... #> Vector of group : #> [1] 1 1 1 1 1 1 #> ... #> Vector of starting time : #> [1] 0 #> ... #> Vector of time : #> [1] 1 2 3 4 #>  #> Number of subject : #> [1] 5"},{"path":"https://fbertran.github.io/Cascade/reference/head-micro_array-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Overview of a micro_array object — head,micro_array-method","title":"Overview of a micro_array object — head,micro_array-method","text":"Overview micro_array object.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/head-micro_array-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Overview of a micro_array object — head,micro_array-method","text":"","code":"# S4 method for class 'micro_array' head(x, ...)"},{"path":"https://fbertran.github.io/Cascade/reference/head-micro_array-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Overview of a micro_array object — head,micro_array-method","text":"x object class `micro_array`. ... additional parameters","code":""},{"path":"https://fbertran.github.io/Cascade/reference/head-micro_array-method.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Overview of a micro_array object — head,micro_array-method","text":"list(\"signature(x = \\\"\\\")\") Gives overview. list(\"signature(x = \\\"micro_array\\\")\") Gives overview.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/head-micro_array-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Overview of a micro_array object — head,micro_array-method","text":"","code":"if(require(CascadeData)){   data(micro_US)   micro_US<-as.micro_array(micro_US,time=c(60,90,210,390),subject=6)   head(micro_US)   } #> The matrix : #>  #>           N1_US_T60 N1_US_T90 N1_US_T210 #> 1007_s_at     103.2     133.7      157.3 #> 1053_at        26.0      34.9       44.2 #> 117_at         70.7      71.2       59.4 #> 121_at        213.7     168.9      175.1 #> 1255_g_at      13.7      17.2       27.8 #> 1294_at       176.6     198.9      180.2 #> ... #>  #> Vector of names : #> [1] \"1007_s_at\" \"1053_at\"   \"117_at\"    \"121_at\"    \"1255_g_at\" \"1294_at\"   #> ... #> Vector of group : #> [1] 0 #> ... #> Vector of starting time : #> [1] 0 #> ... #> Vector of time : #> [1]  60  90 210 390 #>  #> Number of subject : #> [1] 6"},{"path":"https://fbertran.github.io/Cascade/reference/inference-micro_array-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse-engineer the network — inference,micro_array-method","title":"Reverse-engineer the network — inference,micro_array-method","text":"Reverse-engineer network.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/inference-micro_array-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse-engineer the network — inference,micro_array-method","text":"","code":"# S4 method for class 'micro_array' inference(   M,   tour.max = 30,   g = function(x) { 1/x  },   conv = 0.001,   cv.subjects = TRUE,   nb.folds = NULL,   eps = 10^-5,   type.inf = \"iterative\" )"},{"path":"https://fbertran.github.io/Cascade/reference/inference-micro_array-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse-engineer the network — inference,micro_array-method","text":"M micro_array object. tour.max maximal number steps. Defaults `tour.max=30` g new solution choosen (old solution + g(x) * new solution)/(1+g(x)) x number steps. Defaults `g=function(x) 1/x` conv convergence criterion. Defaults `conv=10e-3` cv.subjects cross validation done removing subject one one ? Defaults `cv.subjects=TRUE`. nb.folds Relevant cv.subjects FALSE. number folds cross validation. Defaults `NULL`. eps machine zero. Defaults `10e-5`. type.inf \"iterative\" \"noniterative\" : algorithm computed iteratively. Defaults `\"iterative\"`.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/inference-micro_array-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse-engineer the network — inference,micro_array-method","text":"network object.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/inference-micro_array-method.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Reverse-engineer the network — inference,micro_array-method","text":"Jung, N., Bertrand, F., Bahram, S., Vallat, L., Maumy-Bertrand, M. (2014). Cascade: R-package study, predict simulate diffusion signal temporal gene network. Bioinformatics, btt705. Vallat, L., Kemper, C. ., Jung, N., Maumy-Bertrand, M., Bertrand, F., Meyer, N., ... & Bahram, S. (2013). Reverse-engineering genetic circuitry cancer cell predicted intervention chronic lymphocytic leukemia. Proceedings National Academy Sciences, 110(2), 459-464.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/inference-micro_array-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reverse-engineer the network — inference,micro_array-method","text":"Nicolas Jung, Frédéric Bertrand , Myriam Maumy-Bertrand.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/inference-micro_array-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse-engineer the network — inference,micro_array-method","text":"","code":"# \\donttest{ #With simulated data data(M) infM <- inference(M) #> Loading required package: nnls #> We are at step :  1 #> The convergence of the network is (L1 norm) : 0.0068 #> We are at step :  2 #> The convergence of the network is (L1 norm) : 0.00121 #> We are at step :  3 #> The convergence of the network is (L1 norm) : 0.00096   str(infM) #> Formal class 'network' [package \"Cascade\"] with 6 slots #>   ..@ network: num [1:100, 1:100] 0 0 0 0 0 0 0 0 0 0 ... #>   ..@ name   : chr [1:100] \"gene 1\" \"gene 2\" \"gene 3\" \"gene 4\" ... #>   ..@ F      : num [1:3, 1:3, 1:6] 1.0574 0.048 0.0588 0 1.0574 ... #>   ..@ convF  : num [1:6, 1:4] 0.333 0.333 0.333 0.333 0.333 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:4] \"convF\" \"cc\" \"cc\" \"cc\" #>   ..@ convO  : num [1:4] 5.36e+04 6.80e-03 1.21e-03 9.61e-04 #>   ..@ time_pt: int [1:4] 1 2 3 4  #With selection of genes from GSE39411 data(Selection) infSel <- inference(Selection) #> We are at step :  1 #> The convergence of the network is (L1 norm) : 0.01096 #> We are at step :  2 #> The convergence of the network is (L1 norm) : 0.00302 #> We are at step :  3 #> The convergence of the network is (L1 norm) : 0.00217 #> We are at step :  4 #> The convergence of the network is (L1 norm) : 0.00177 #> We are at step :  5 #> The convergence of the network is (L1 norm) : 0.00146 #> We are at step :  6 #> The convergence of the network is (L1 norm) : 0.00111 #> We are at step :  7 #> The convergence of the network is (L1 norm) : 0.00089   str(infSel) #> Formal class 'network' [package \"Cascade\"] with 6 slots #>   ..@ network: num [1:74, 1:74] 0 0 0 0 0 0 0 0 0 0 ... #>   ..@ name   : Named chr [1:74] \"ID2-AS1\" \"CCDC40\" \"unknown\" \"LOC105379178\" ... #>   .. ..- attr(*, \"names\")= chr [1:74] \"236719_at\" \"1563563_at\" NA \"1556161_a_at\" ... #>   ..@ F      : num [1:3, 1:3, 1:6] 0.6089 0.0147 0 0 0.6089 ... #>   ..@ convF  : num [1:6, 1:8] 0.333 0.333 0.333 0.333 0.333 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:8] \"convF\" \"cc\" \"cc\" \"cc\" ... #>   ..@ convO  : num [1:8] 0.85033 0.01096 0.00302 0.00217 0.00177 ... #>   ..@ time_pt: num [1:4] 60 90 210 390 # }"},{"path":"https://fbertran.github.io/Cascade/reference/micro_array-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"\"micro_array\" class","code":""},{"path":"https://fbertran.github.io/Cascade/reference/micro_array-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls form new(\"micro_array\", ...).","code":""},{"path":"https://fbertran.github.io/Cascade/reference/micro_array-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"micro_array\") #> Class \"micro_array\" [package \"Cascade\"] #>  #> Slots: #>                                                                          #> Name:  microarray       name      group start_time       time    subject #> Class:     matrix     vector     vector     vector     vector    numeric"},{"path":"https://fbertran.github.io/Cascade/reference/micropredict-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"\"micropredict\" class","code":""},{"path":"https://fbertran.github.io/Cascade/reference/micropredict-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls form new(\"micropredict\", ...).","code":""},{"path":"https://fbertran.github.io/Cascade/reference/micropredict-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"micropredict\") #> Class \"micropredict\" [package \"Cascade\"] #>  #> Slots: #>                                                                       #> Name:  microarray_unchanged   microarray_changed   microarray_predict #> Class:          micro_array          micro_array          micro_array #>                                                                       #> Name:                    nv              network              targets #> Class:              numeric              network              numeric"},{"path":"https://fbertran.github.io/Cascade/reference/network-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"\"network\" class","code":""},{"path":"https://fbertran.github.io/Cascade/reference/network-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls form new(\"network\", ...).","code":""},{"path":"https://fbertran.github.io/Cascade/reference/network-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"network\") #> Class \"network\" [package \"Cascade\"] #>  #> Slots: #>                                                        #> Name:  network    name       F   convF   convO time_pt #> Class:  matrix  vector   array  matrix  vector  vector"},{"path":"https://fbertran.github.io/Cascade/reference/network.html","id":null,"dir":"Reference","previous_headings":"","what":"A network object data. — network","title":"A network object data. — network","text":"network object. result vignette inference network.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A network object data. — network","text":"","code":"data(network) plot(network)  print(network) #> This is a S4 class with :  #>  - (@network) a matrix of dimension  74 * 74  .... [the network]  #>  - (@name) a vector of length  74  .... [gene names]  #>  - (@F) a array of dimension  3 * 3 * 6  .... [F matrices]  #>  - (@convF) a matrix of dimension  6 * 8  .... [convergence (L1 norm) of array F]  #>  - (@convO)a vector of length  8  .... [convergence (L1 norm) of matrix Omega] #>  - (@time_pt) an vector of length 4   .... [time points]"},{"path":"https://fbertran.github.io/Cascade/reference/network_random.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a network. — network_random","title":"Generates a network. — network_random","text":"Generates network.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/network_random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a network. — network_random","text":"","code":"network_random(   nb,   time_label,   exp,   init,   regul,   min_expr,   max_expr,   casc.level )"},{"path":"https://fbertran.github.io/Cascade/reference/network_random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a network. — network_random","text":"nb Integer. number genes. time_label Vector. time points measurements. exp exponential parameter, barabasi.game function igraph package. init attractiveness vertices adjacent edges. See barabasi.game function. regul vector mapping gene number regulators. min_expr Minimum strength non-zero link max_expr Maximum strength non-zero link casc.level ...","code":""},{"path":"https://fbertran.github.io/Cascade/reference/network_random.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a network. — network_random","text":"network object.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/network_random.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates a network. — network_random","text":"Jung, N., Bertrand, F., Bahram, S., Vallat, L., Maumy-Bertrand, M. (2014). Cascade: R-package study, predict simulate diffusion signal temporal gene network. Bioinformatics, btt705. Vallat, L., Kemper, C. ., Jung, N., Maumy-Bertrand, M., Bertrand, F., Meyer, N., ... & Bahram, S. (2013). Reverse-engineering genetic circuitry cancer cell predicted intervention chronic lymphocytic leukemia. Proceedings National Academy Sciences, 110(2), 459-464.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/network_random.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates a network. — network_random","text":"Nicolas Jung, Frédéric Bertrand , Myriam Maumy-Bertrand.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/network_random.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a network. — network_random","text":"","code":"set.seed(1) Net<-network_random(   nb=100,   time_label=rep(1:4,each=25),   exp=1,   init=1,   regul=round(rexp(100,1))+1,   min_expr=0.1,   max_expr=2,   casc.level=0.4   ) plot(Net)"},{"path":"https://fbertran.github.io/Cascade/reference/plot-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot — plot-methods","title":"Plot — plot-methods","text":"Considering class argument passed plot, graphical output differs.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/plot-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot — plot-methods","text":"","code":"# S4 method for class 'micro_array,ANY' plot(x, y, ...)  # S4 method for class 'network,ANY' plot(   x,   y,   choice = \"network\",   nv = 0,   gr = NULL,   ini = NULL,   color.vertex = NULL,   video = TRUE,   weight.node = NULL,   ani = FALSE,   taille = c(2000, 1000),   label_v = 1:dim(x@network)[1],   horiz = TRUE,   legend.position = \"topleft\",   frame.color = \"black\",   label.hub = FALSE,   ... )  # S4 method for class 'micropredict,ANY' plot(   x,   time = NULL,   label_v = NULL,   frame.color = \"white\",   ini = NULL,   label.hub = FALSE,   edge.arrow.size = 0.7,   edge.thickness = 1 )"},{"path":"https://fbertran.github.io/Cascade/reference/plot-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot — plot-methods","text":"x micro_array object, network object micropredict object y optional used x appropriate structure ... additional parameters choice graphic plotted: either \"F\" (representation matrices F) \"network\". nv level cutoff. Defaut `0`. gr vector giving group gene ini using “position” function, can fix position nodes. color.vertex vector defining color vertex. video ani TRUE video TRUE, result animation saved animated GIF. weight.node nodes weighting. Defaults `NULL`. ani animated plot? taille vector giving size plot. Default `c(2000,1000)`. label_v vector defining vertex labels. horiz landscape? Defaults `TRUE`. legend.position position legend. frame.color color frames. label.hub logical ; TRUE hubs labeled. time sets time plot prediction. Defaults `NULL` edge.arrow.size size arrows ; default 0.7. edge.thickness edge thickness ; default 1.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/plot-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Plot — plot-methods","text":"list(\"signature(x = \\\"micro_array\\\", y = \\\"\\\",...)\")  x micro_array object list_nv vector cutoff network shown  list(\"signature(x = \\\"network\\\", y = \\\"\\\",...)\")  x network object list() Optionnal arguments: gr vector giving group gene choice graphic plotted: either \"F\" (representation matrices F) \"network\". nv level cutoff. Defaut 0. ini using “position” function, can fix position nodes color.vertex vector defining color vertex ani animated plot? size vector giving size plot. Default c(2000,1000) video ani TRUE video TRUE, animation result GIF video label_v vector defining vertex labels legend.position position legend frame.color color frames label.hub logical ; TRUE hubs labeled edge.arrow.size size arrows ; default 0.7 edge.thickness edge thickness ; default 1.  list(\"signature(x = \\\"micropredict\\\", y = \\\"\\\",...)\")  x micropredict object list() Optionnal arguments: see plot network","code":""},{"path":"https://fbertran.github.io/Cascade/reference/plot-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot — plot-methods","text":"","code":"data(Net) plot(Net)   data(M) plot(M)         data(Selection) data(network) nv<-0.11 plot(network,choice=\"network\",gr=Selection@group,nv=nv,label_v=Selection@name, edge.arrow.size=0.9,edge.thickness=1.5)"},{"path":"https://fbertran.github.io/Cascade/reference/position-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the position of edges in the network — position-methods","title":"Returns the position of edges in the network — position-methods","text":"Returns position edges network","code":""},{"path":"https://fbertran.github.io/Cascade/reference/position-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the position of edges in the network — position-methods","text":"","code":"# S4 method for class 'network' position(net, nv = 0)"},{"path":"https://fbertran.github.io/Cascade/reference/position-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the position of edges in the network — position-methods","text":"net network object nv level cutoff analysis done","code":""},{"path":"https://fbertran.github.io/Cascade/reference/position-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Returns the position of edges in the network — position-methods","text":"list(\"signature(net = \\\"network\\\")\") Returns matrix position node. matrix can used argument plot function.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/position-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the position of edges in the network — position-methods","text":"","code":"data(Net) position(Net) #>       nom                   #>  [1,]   1 77.62579 157.0584 #>  [2,]   2 75.86162 145.5901 #>  [3,]   3 77.29868 153.1147 #>  [4,]   4 74.31050 147.6802 #>  [5,]   5 83.89926 146.1839 #>  [6,]   6 80.05434 155.1712 #>  [7,]   7 76.45764 155.5151 #>  [8,]   8 82.02396 155.7621 #>  [9,]   9 75.57764 156.6670 #> [10,]  10 78.35228 149.7702 #> [11,]  11 79.85832 148.8184 #> [12,]  12 80.89050 148.5299 #> [13,]  14 81.44963 157.3230 #> [14,]  16 77.57833 149.8369 #> [15,]  17 83.20596 153.8566 #> [16,]  18 81.16200 155.9456 #> [17,]  20 77.76132 158.0188 #> [18,]  21 76.00897 157.7624 #> [19,]  22 74.01613 144.5360 #> [20,]  23 75.62523 154.4312 #> [21,]  24 76.64469 152.2593 #> [22,]  25 79.10569 142.6129 #> [23,]  26 74.73178 151.1691 #> [24,]  27 77.97744 156.6956 #> [25,]  28 77.21315 155.6830 #> [26,]  29 79.24969 157.6255 #> [27,]  30 76.38985 154.9049 #> [28,]  31 77.84272 146.4079 #> [29,]  32 80.27481 151.3799 #> [30,]  33 77.92357 147.9329 #> [31,]  34 74.26854 146.2650 #> [32,]  35 76.61424 148.4267 #> [33,]  36 81.39357 151.9091 #> [34,]  37 81.55097 146.1946 #> [35,]  38 74.74029 154.6516 #> [36,]  39 82.31326 153.8545 #> [37,]  40 85.20149 145.5326 #> [38,]  41 83.91929 155.6658 #> [39,]  42 80.93662 153.9012 #> [40,]  43 82.58841 157.7389 #> [41,]  44 73.44880 145.9081 #> [42,]  45 80.09926 148.0367 #> [43,]  46 84.03046 150.8273 #> [44,]  47 81.15431 152.2193 #> [45,]  48 83.24490 156.3656 #> [46,]  49 80.13362 157.5086 #> [47,]  50 79.06117 155.9157 #> [48,]  51 79.89945 145.6803 #> [49,]  52 83.28830 153.1798 #> [50,]  53 81.82004 151.8780 #> [51,]  54 83.65226 150.5278 #> [52,]  55 76.96182 150.6762 #> [53,]  56 83.83091 152.0310 #> [54,]  57 78.82390 148.4193 #> [55,]  58 77.52936 154.7118 #> [56,]  59 81.65878 150.7512 #> [57,]  60 78.86766 149.5199 #> [58,]  61 84.79111 152.5720 #> [59,]  62 74.79204 156.1215 #> [60,]  63 73.36673 152.0233 #> [61,]  64 79.87701 154.1460 #> [62,]  65 79.16445 150.5090 #> [63,]  66 82.67888 150.8210 #> [64,]  67 79.98753 151.0154 #> [65,]  68 74.30660 153.1945 #> [66,]  69 81.17450 149.4634 #> [67,]  70 75.02532 153.7643 #> [68,]  71 82.19025 148.3039 #> [69,]  72 77.84696 153.4190 #> [70,]  73 79.47406 152.5963 #> [71,]  74 82.67573 151.8654 #> [72,]  75 86.32603 150.7217 #> [73,]  76 86.19493 149.9689 #> [74,]  77 86.24802 151.5261 #> [75,]  78 75.55672 151.0400 #> [76,]  79 75.94398 153.1528 #> [77,]  80 78.12836 151.0402 #> [78,]  81 85.75086 149.3029 #> [79,]  82 83.50015 148.6658 #> [80,]  83 72.89340 149.5794 #> [81,]  84 71.64668 151.5817 #> [82,]  85 81.85064 149.5437 #> [83,]  86 82.20630 150.0122 #> [84,]  87 78.76255 154.4276 #> [85,]  88 80.58430 150.3077 #> [86,]  89 76.19552 150.2142 #> [87,]  90 76.11220 148.2913 #> [88,]  91 76.75863 149.6426 #> [89,]  92 74.65087 149.6649 #> [90,]  93 80.68069 146.1115 #> [91,]  94 85.41577 154.2702 #> [92,]  95 82.44209 153.1057 #> [93,]  96 84.19332 144.7133 #> [94,]  97 71.70009 152.6738 #> [95,]  98 80.07012 142.6054 #> [96,]  99 74.93735 143.7101 #> [97,] 100 82.25926 146.5941"},{"path":"https://fbertran.github.io/Cascade/reference/predict-micro_array-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction of the gene expressions after a knock-out experience predict — predict,micro_array-method","title":"Prediction of the gene expressions after a knock-out experience predict — predict,micro_array-method","text":"Prediction gene expressions knock-experience","code":""},{"path":"https://fbertran.github.io/Cascade/reference/predict-micro_array-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction of the gene expressions after a knock-out experience predict — predict,micro_array-method","text":"","code":"# S4 method for class 'micro_array' predict(object, Omega, nv = 0, targets = NULL, adapt = TRUE)"},{"path":"https://fbertran.github.io/Cascade/reference/predict-micro_array-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction of the gene expressions after a knock-out experience predict — predict,micro_array-method","text":"object micro_array object Omega network object. nv [=0] numeric; level cutoff targets [NULL] vector; genes knocked ? adapt [TRUE] boolean; raise error used vectors instead one column matrices.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/predict-micro_array-method.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Prediction of the gene expressions after a knock-out experience predict — predict,micro_array-method","text":"Jung, N., Bertrand, F., Bahram, S., Vallat, L., Maumy-Bertrand, M. (2014). Cascade: R-package study, predict simulate diffusion signal temporal gene network. Bioinformatics, btt705. Vallat, L., Kemper, C. ., Jung, N., Maumy-Bertrand, M., Bertrand, F., Meyer, N., ... & Bahram, S. (2013). Reverse-engineering genetic circuitry cancer cell predicted intervention chronic lymphocytic leukemia. Proceedings National Academy Sciences, 110(2), 459-464.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/predict-micro_array-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prediction of the gene expressions after a knock-out experience predict — predict,micro_array-method","text":"Nicolas Jung, Frédéric Bertrand , Myriam Maumy-Bertrand.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/predict-micro_array-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction of the gene expressions after a knock-out experience predict — predict,micro_array-method","text":"","code":"data(Selection) data(network) #A nv value can chosen using the cutoff function nv=.11 EGR1<-which(match(Selection@name,\"EGR1\")==1) P<-position(network,nv=nv)  #We predict gene expression modulations within the network if EGR1 is experimentaly knocked-out.  prediction_ko5<-predict(Selection,network,nv=nv,targets=EGR1)  #Then we plot the results. Here for example we see changes at time point t2: plot(prediction_ko5,time=2,ini=P,label_v=Selection@name)"},{"path":"https://fbertran.github.io/Cascade/reference/print-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for Function print — print-methods","title":"Methods for Function print — print-methods","text":"Methods function print","code":""},{"path":"https://fbertran.github.io/Cascade/reference/print-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for Function print — print-methods","text":"","code":"# S4 method for class 'micro_array' print(x, ...)  # S4 method for class 'network' print(x, ...)"},{"path":"https://fbertran.github.io/Cascade/reference/print-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for Function print — print-methods","text":"x object class micro-array network ... additional parameters","code":""},{"path":"https://fbertran.github.io/Cascade/reference/print-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for Function print — print-methods","text":"","code":"data(Net) print(Net) #> This is a S4 class with :  #>  - (@network) a matrix of dimension  100 * 100  .... [the network]  #>  - (@name) a vector of length  100  .... [gene names]  #>  - (@F) a array of dimension  3 * 3 * 6  .... [F matrices]  #>  - (@convF) a matrix of dimension  1 * 1  .... [convergence (L1 norm) of array F]  #>  - (@convO)a vector of length  1  .... [convergence (L1 norm) of matrix Omega] #>  - (@time_pt) an vector of length 4   .... [time points]  data(M) print(M) #> This is a micro_array S4 class. It contains :  #>  - (@microarray) a matrix of dimension  100 * 20  #>           .... [gene expressions]  #>  - (@name) a vector of length  100  .... [gene names]  #>  - (@group) a vector of length  100  .... [groups for genes]  #>  - (@start_time) a vector of length  1  #>           .... [first differential expression for genes]  #>  - (@time)a vector of length  4  .... [time points] #>  - (@subject) an integer  .... [number of subject]"},{"path":"https://fbertran.github.io/Cascade/reference/summary-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for Function summary — summary-methods","title":"Methods for Function summary — summary-methods","text":"Methods function summary","code":""},{"path":"https://fbertran.github.io/Cascade/reference/summary-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for Function summary — summary-methods","text":"","code":"# S4 method for class 'micro_array' summary(object, nb.graph = NULL, ...)"},{"path":"https://fbertran.github.io/Cascade/reference/summary-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for Function summary — summary-methods","text":"object object class micro-array nb.graph (optionnal) choose graph plot. Displays graphs default. ... additional parameters.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/summary-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for Function summary — summary-methods","text":"","code":"data(M) summary(M) #>  log(S/US) : P1T1   log(S/US) : P1T2     log(S/US) : P1T3    #>  Min.   :-759.882   Min.   :-2024.5979   Min.   :-1007.748   #>  1st Qu.: -36.758   1st Qu.:  -22.5653   1st Qu.:  -68.054   #>  Median :   6.265   Median :    0.5759   Median :   -4.192   #>  Mean   :  10.613   Mean   :   -6.6230   Mean   :    3.085   #>  3rd Qu.:  74.682   3rd Qu.:   78.2516   3rd Qu.:   74.866   #>  Max.   : 647.643   Max.   :  870.7513   Max.   : 1155.413   #>  log(S/US) : P1T4    log(S/US) : P2T1   log(S/US) : P2T2    log(S/US) : P2T3   #>  Min.   :-1075.636   Min.   :-790.431   Min.   :-1505.543   Min.   :-980.965   #>  1st Qu.:  -31.538   1st Qu.: -65.394   1st Qu.:  -59.833   1st Qu.: -55.077   #>  Median :   -2.293   Median :   2.087   Median :   -1.262   Median :  -7.144   #>  Mean   :    9.055   Mean   :   7.791   Mean   :  -18.568   Mean   : -35.647   #>  3rd Qu.:   75.316   3rd Qu.:  70.108   3rd Qu.:   76.908   3rd Qu.:  41.364   #>  Max.   :  556.449   Max.   : 669.203   Max.   : 1058.385   Max.   :1114.897   #>  log(S/US) : P2T4   log(S/US) : P3T1     log(S/US) : P3T2   log(S/US) : P3T3    #>  Min.   :-547.117   Min.   :-1278.6158   Min.   :-624.834   Min.   :-1018.897   #>  1st Qu.: -58.721   1st Qu.:  -42.1909   1st Qu.: -48.460   1st Qu.:  -52.456   #>  Median :  -3.519   Median :    0.4064   Median :  -2.505   Median :   -2.026   #>  Mean   : -24.277   Mean   :   -3.8860   Mean   : -11.950   Mean   :    5.893   #>  3rd Qu.:  37.621   3rd Qu.:   48.4275   3rd Qu.:  33.780   3rd Qu.:   43.213   #>  Max.   : 270.423   Max.   :  527.3972   Max.   : 576.141   Max.   : 1159.517   #>  log(S/US) : P3T4    log(S/US) : P4T1   log(S/US) : P4T2     log(S/US) : P4T3   #>  Min.   :-2403.703   Min.   :-683.000   Min.   :-1.957e+03   Min.   :-591.460   #>  1st Qu.:  -57.494   1st Qu.: -81.510   1st Qu.:-3.934e+01   1st Qu.: -39.499   #>  Median :   -4.528   Median :   5.102   Median :-2.154e-02   Median :   2.251   #>  Mean   :  -33.088   Mean   :  -2.034   Mean   : 2.955e+00   Mean   :  27.377   #>  3rd Qu.:   51.808   3rd Qu.:  74.738   3rd Qu.: 7.719e+01   3rd Qu.:  62.097   #>  Max.   :  495.014   Max.   : 454.955   Max.   : 9.551e+02   Max.   :1341.859   #>  log(S/US) : P4T4   log(S/US) : P5T1   log(S/US) : P5T2    log(S/US) : P5T3   #>  Min.   :-577.069   Min.   :-436.986   Min.   :-647.1962   Min.   :-409.347   #>  1st Qu.: -31.924   1st Qu.: -69.809   1st Qu.: -48.5156   1st Qu.: -44.205   #>  Median :   2.456   Median :   2.156   Median :  -0.2949   Median :  -1.056   #>  Mean   :  29.675   Mean   :  -2.929   Mean   :   6.2300   Mean   :   6.190   #>  3rd Qu.:  35.322   3rd Qu.:  47.462   3rd Qu.:  47.9558   3rd Qu.:  47.694   #>  Max.   :1577.042   Max.   : 651.596   Max.   :1359.9584   Max.   : 434.178   #>  log(S/US) : P5T4   #>  Min.   :-188.652   #>  1st Qu.: -33.097   #>  Median :   1.873   #>  Mean   :  26.740   #>  3rd Qu.:  67.879   #>  Max.   : 743.820"},{"path":"https://fbertran.github.io/Cascade/reference/unionMicro-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes the union between two micro_array objects. — unionMicro-methods","title":"Makes the union between two micro_array objects. — unionMicro-methods","text":"Makes union two micro_array objects.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/unionMicro-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes the union between two micro_array objects. — unionMicro-methods","text":"","code":"# S4 method for class 'micro_array,micro_array' unionMicro(M1, M2)"},{"path":"https://fbertran.github.io/Cascade/reference/unionMicro-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes the union between two micro_array objects. — unionMicro-methods","text":"M1 micro-array list micro-arrays M2 micro-array nothing M1 list micro-arrays","code":""},{"path":"https://fbertran.github.io/Cascade/reference/unionMicro-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Makes the union between two micro_array objects. — unionMicro-methods","text":"list(\"signature(M1 = \\\"micro_array\\\", M2 = \\\"micro_array\\\")\") Returns micro_array object union M1 M2. list(\"signature(M1 = \\\"list\\\", M2 = \\\"\\\")\") Returns micro_array object union elements M1.","code":""},{"path":"https://fbertran.github.io/Cascade/reference/unionMicro-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Makes the union between two micro_array objects. — unionMicro-methods","text":"","code":"data(M) #Create another microarray object with 100 genes Mbis<-M #Rename the 100 genes Mbis@name<-paste(M@name,\"bis\") rownames(Mbis@microarray) <- Mbis@name #Union (merge without duplicated names) of the two microarrays.  str(unionMicro(M,Mbis)) #> Formal class 'micro_array' [package \"Cascade\"] with 6 slots #>   ..@ microarray: num [1:200, 1:20] 41.4 478.6 -655.7 -759.9 -159.7 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : chr [1:200] \"gene 1\" \"gene 2\" \"gene 3\" \"gene 4\" ... #>   .. .. ..$ : chr [1:20] \"log(S/US) : P1T1\" \"log(S/US) : P1T2\" \"log(S/US) : P1T3\" \"log(S/US) : P1T4\" ... #>   ..@ name      : chr [1:200] \"gene 1\" \"gene 2\" \"gene 3\" \"gene 4\" ... #>   ..@ group     : int [1:200] 1 1 1 1 1 1 1 1 1 1 ... #>   ..@ start_time: num [1:200] 0 NA NA NA NA NA NA NA NA NA ... #>   ..@ time      : int [1:4] 1 2 3 4 #>   ..@ subject   : num 5"},{"path":"https://fbertran.github.io/Cascade/news/index.html","id":"cascade-23","dir":"Changelog","previous_headings":"","what":"Cascade 2.3","title":"Cascade 2.3","text":"Maintainer email update. Added package doi","code":""},{"path":"https://fbertran.github.io/Cascade/news/index.html","id":"cascade-22","dir":"Changelog","previous_headings":"","what":"Cascade 2.2","title":"Cascade 2.2","text":"CRAN release: 2025-08-21 Added unit tests. Fixed citation file.","code":""},{"path":"https://fbertran.github.io/Cascade/news/index.html","id":"cascade-21","dir":"Changelog","previous_headings":"","what":"Cascade 2.1","title":"Cascade 2.1","text":"CRAN release: 2022-11-28 Fixes Rd files change maintainer email.","code":""},{"path":"https://fbertran.github.io/Cascade/news/index.html","id":"cascade-20","dir":"Changelog","previous_headings":"","what":"Cascade 2.0","title":"Cascade 2.0","text":"CRAN release: 2021-03-19 Roxygen package, add badges, logo, package help page update pkgdown site.","code":""},{"path":"https://fbertran.github.io/Cascade/news/index.html","id":"cascade-18","dir":"Changelog","previous_headings":"","what":"Cascade 1.8","title":"Cascade 1.8","text":"CRAN release: 2019-08-24 Fix discrepancy datalist datasets requested CRAN.","code":""},{"path":"https://fbertran.github.io/Cascade/news/index.html","id":"cascade-17","dir":"Changelog","previous_headings":"","what":"Cascade 1.7","title":"Cascade 1.7","text":"CRAN release: 2019-02-18 Help pages completed examples added every function. required new datasets added package.","code":""},{"path":"https://fbertran.github.io/Cascade/news/index.html","id":"cascade-16","dir":"Changelog","previous_headings":"","what":"Cascade 1.6","title":"Cascade 1.6","text":"Added NEWS.md file track changes package. Package splited data shiped apart CRAN CascadeData package","code":""},{"path":"https://fbertran.github.io/Cascade/news/index.html","id":"cascade-15","dir":"Changelog","previous_headings":"","what":"Cascade 1.5","title":"Cascade 1.5","text":"Package especially code transformed cope CRAN requirements","code":""},{"path":"https://fbertran.github.io/Cascade/news/index.html","id":"cascade-10---14","dir":"Changelog","previous_headings":"","what":"Cascade 1.0 - 1.4","title":"Cascade 1.0 - 1.4","text":"Creation review package","code":""}]
